<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CentOS 7 Install Redis</title>
    <link href="/2023/12/07/CentOS7InstallRedis/"/>
    <url>/2023/12/07/CentOS7InstallRedis/</url>
    
    <content type="html"><![CDATA[<h1 id="CentOS安装Redis"><a href="#CentOS安装Redis" class="headerlink" title="CentOS安装Redis"></a>CentOS安装Redis</h1><h2 id="1-检查Redis-yum-源"><a href="#1-检查Redis-yum-源" class="headerlink" title="1. 检查Redis yum 源"></a>1. 检查Redis yum 源</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install redis<br></code></pre></td></tr></table></figure><h2 id="2-下载fedora的epel仓库"><a href="#2-下载fedora的epel仓库" class="headerlink" title="2. 下载fedora的epel仓库"></a>2. 下载fedora的epel仓库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install epel-release<br></code></pre></td></tr></table></figure><h2 id="3-安装redis数据库"><a href="#3-安装redis数据库" class="headerlink" title="3. 安装redis数据库"></a>3. 安装redis数据库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install redis<br></code></pre></td></tr></table></figure><h2 id="4-启动redis服务"><a href="#4-启动redis服务" class="headerlink" title="4. 启动redis服务"></a>4. 启动redis服务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动redis</span><br>systemctl start redis<br><span class="hljs-meta prompt_"># </span><span class="language-bash">开机自启redis</span><br>systemctl enable redis<br><span class="hljs-meta prompt_"># </span><span class="language-bash">停止redis</span><br>systemctl stop redis<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看redis运行状态</span><br>systemctl status redis<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看redis进程</span><br>ps -ef | grep redis<br></code></pre></td></tr></table></figure><h2 id="5-设置redis为开机自动启动"><a href="#5-设置redis为开机自动启动" class="headerlink" title="5. 设置redis为开机自动启动"></a>5. 设置redis为开机自动启动</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl enable redis<br></code></pre></td></tr></table></figure><h2 id="6-进入redis服务"><a href="#6-进入redis服务" class="headerlink" title="6. 进入redis服务"></a>6. 进入redis服务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-cli<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">验证密码</span><br>auth &#x27;密码&#x27;<br></code></pre></td></tr></table></figure><h2 id="7-开放防火墙端口"><a href="#7-开放防火墙端口" class="headerlink" title="7. 开放防火墙端口"></a>7. 开放防火墙端口</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 查看防火墙状态</span><br>firewall-cmd --state<br><span class="hljs-comment"># 启动firewall</span><br>systemctl start firewalld.service<br><span class="hljs-comment"># 设置开机自启</span><br>systemctl <span class="hljs-built_in">enable</span> firewalld.service<br><span class="hljs-comment"># 重启防火墙</span><br>systemctl restart firewalld.service<br><br><span class="hljs-comment"># 开启6379端口</span><br>firewall-cmd <span class="hljs-attribute">--zone</span>=public <span class="hljs-attribute">--add-port</span>=6379/tcp --permanent<br>firewall-cmd --reload<br></code></pre></td></tr></table></figure><h2 id="8-配置Redis端口及密码"><a href="#8-配置Redis端口及密码" class="headerlink" title="8. 配置Redis端口及密码"></a>8. 配置Redis端口及密码</h2><p>1、打开配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/redis.conf<br></code></pre></td></tr></table></figure><p>2、修改默认端口port 6379改为相应端口</p><p>3、开启远程访问</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text"># 找到 bind 127.0.0.1 将其注释<br># 找到 protected-mode yes 将其改为<br>protected-mode no<br></code></pre></td></tr></table></figure><h2 id="9-使用配置文件启动Redis"><a href="#9-使用配置文件启动Redis" class="headerlink" title="9. 使用配置文件启动Redis"></a>9. 使用配置文件启动Redis</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-server /etc/redis.conf &amp;<br></code></pre></td></tr></table></figure><h1 id="本机登录验证"><a href="#本机登录验证" class="headerlink" title="本机登录验证"></a>本机登录验证</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">登录</span><br>redis-cli -h 127.0.0.1 -p 6379<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">认证用户密码</span><br>auth &#x27;password&#x27;<br></code></pre></td></tr></table></figure><h1 id="启停操作"><a href="#启停操作" class="headerlink" title="启停操作"></a>启停操作</h1><h2 id="1-命令关闭Redis"><a href="#1-命令关闭Redis" class="headerlink" title="1. 命令关闭Redis"></a>1. 命令关闭Redis</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-cli -h 127.0.0.1 -p 6379<br><span class="hljs-meta prompt_">redis&gt; </span><span class="language-bash">shutdown</span><br></code></pre></td></tr></table></figure><h2 id="2-进程关闭Redis"><a href="#2-进程关闭Redis" class="headerlink" title="2. 进程关闭Redis"></a>2. 进程关闭Redis</h2><p><img src="https://xiyuxie.com.cn/img/webp.png" alt="kill-redis-process"></p><h2 id="3-systemctl启停"><a href="#3-systemctl启停" class="headerlink" title="3. systemctl启停"></a>3. systemctl启停</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">root@redis ~</span>]<span class="hljs-meta"># systemctl stop redis</span><br>[<span class="hljs-meta">root@redis ~</span>]<span class="hljs-meta"># systemctl start redis</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CentOS</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CentOS</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssh远程连接报错 Algorithm negotiation failed</title>
    <link href="/2023/12/05/ssh%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%8A%A5%E9%94%99-Algorithm-negotiation-failed/"/>
    <url>/2023/12/05/ssh%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%8A%A5%E9%94%99-Algorithm-negotiation-failed/</url>
    
    <content type="html"><![CDATA[<h1 id="ssh-远程连接报错-Algorithm-negotiation-failed"><a href="#ssh-远程连接报错-Algorithm-negotiation-failed" class="headerlink" title="ssh 远程连接报错 Algorithm negotiation failed"></a>ssh 远程连接报错 Algorithm negotiation failed</h1><h2 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h2><blockquote><p>Algorithm negotiation failed</p></blockquote><h2 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h2><p>ssh客户端远程连接服务器之间的加密算法不一致</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="1-编辑-x2F-etc-x2F-ssh-x2F-sshd-config"><a href="#1-编辑-x2F-etc-x2F-ssh-x2F-sshd-config" class="headerlink" title="1. 编辑&#x2F;etc&#x2F;ssh&#x2F;sshd_config"></a>1. 编辑&#x2F;etc&#x2F;ssh&#x2F;sshd_config</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>ssh/sshd_config<br></code></pre></td></tr></table></figure><h3 id="2-在末尾添加如下信息"><a href="#2-在末尾添加如下信息" class="headerlink" title="2. 在末尾添加如下信息"></a>2. 在末尾添加如下信息</h3><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs smali">Ciphers aes128-cbc,aes192-cbc,aes256-cbc,aes128-ctr,aes192-ctr,aes256-ctr,3des-cbc,arcfour128,arcfour256,arcfour,blowfish-cbc,cast128-cbc<br> <br>MACs hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-ripemd160,hmac-sha1-96,hmac-md5-96<br> <br>KexAlgorithms diffie-hellman-group1-sha1,diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha1,diffie-hellman-group-exchange-sha256,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group1-sha1,curve25519-sha256@libssh.org<br></code></pre></td></tr></table></figure><h3 id="3-重启ssh服务"><a href="#3-重启ssh服务" class="headerlink" title="3. 重启ssh服务"></a>3. 重启ssh服务</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean">## CentOS <span class="hljs-number">7</span>命令<br>systemctl restart sshd.service<br><br>## CentOS <span class="hljs-number">6</span>命令<br>service sshd restart<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CentOS</tag>
      
      <tag>SSH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7安装Mysql 5.7.28</title>
    <link href="/2023/11/17/Centos7%E5%AE%89%E8%A3%85Mysql57/"/>
    <url>/2023/11/17/Centos7%E5%AE%89%E8%A3%85Mysql57/</url>
    
    <content type="html"><![CDATA[<h4 id="1-下载-MySQL-yum包"><a href="#1-下载-MySQL-yum包" class="headerlink" title="1 下载 MySQL yum包"></a>1 下载 MySQL yum包</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget http://repo.mysql.com/mysql57-community-release-el7-10.noarch.rpm<br></code></pre></td></tr></table></figure><h4 id="2-安装MySQL源"><a href="#2-安装MySQL源" class="headerlink" title="2 安装MySQL源"></a>2 安装MySQL源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rpm -Uvh mysql57-community-release-el7-10.noarch.rpm<br></code></pre></td></tr></table></figure><h4 id="3-安装公钥"><a href="#3-安装公钥" class="headerlink" title="3 安装公钥"></a>3 安装公钥</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022<br></code></pre></td></tr></table></figure><h4 id="4-安装MySQL服务端"><a href="#4-安装MySQL服务端" class="headerlink" title="4 安装MySQL服务端"></a>4 安装MySQL服务端</h4><p>安装过程需要等待一些时间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y mysql-community-server<br></code></pre></td></tr></table></figure><h4 id="5-启动MySQL"><a href="#5-启动MySQL" class="headerlink" title="5 启动MySQL"></a>5 启动MySQL</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start mysqld.service<br></code></pre></td></tr></table></figure><h4 id="6-检查是否启动成功"><a href="#6-检查是否启动成功" class="headerlink" title="6 检查是否启动成功"></a>6 检查是否启动成功</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl status mysqld.service<br></code></pre></td></tr></table></figure><h4 id="7-获取临时密码"><a href="#7-获取临时密码" class="headerlink" title="7 获取临时密码"></a>7 获取临时密码</h4><p>使用MySQL5.7为root用户随机生成一个密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">grep &#x27;temporary password&#x27; /var/log/mysqld.log <br></code></pre></td></tr></table></figure><h4 id="8-通过临时密码登录MySQL"><a href="#8-通过临时密码登录MySQL" class="headerlink" title="8 通过临时密码登录MySQL"></a>8 通过临时密码登录MySQL</h4><p>使用临时密码登录MySQL，以进行修改密码操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysql -uroot -p<br></code></pre></td></tr></table></figure><h4 id="9-全局修改MySQL密码复杂度并修改密码"><a href="#9-全局修改MySQL密码复杂度并修改密码" class="headerlink" title="9 全局修改MySQL密码复杂度并修改密码"></a>9 全局修改MySQL密码复杂度并修改密码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; set global validate_password_policy=0;<br>mysql&gt; set global validate_password_length=1;<br><br>mysql&gt; ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;yourpassword&#x27;;<br></code></pre></td></tr></table></figure><h4 id="10-授权其他机器远程登录"><a href="#10-授权其他机器远程登录" class="headerlink" title="10 授权其他机器远程登录"></a>10 授权其他机器远程登录</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;yourpassword&#x27; WITH GRANT OPTION;<br># 刷新权限<br>FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure><h4 id="11-设置开机自启动"><a href="#11-设置开机自启动" class="headerlink" title="11 设置开机自启动"></a>11 设置开机自启动</h4><p>先退出mysql命令行，然后输入以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl enable mysqld<br>systemctl daemon-reload<br></code></pre></td></tr></table></figure><h4 id="12-设置MySQL的字符集为UTF-8"><a href="#12-设置MySQL的字符集为UTF-8" class="headerlink" title="12 设置MySQL的字符集为UTF-8"></a>12 设置MySQL的字符集为UTF-8</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/my.cnf<br></code></pre></td></tr></table></figure><p>修改如下</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># For advice on how to change settings please see</span><br><span class="hljs-comment"># http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html</span><br> <br><span class="hljs-section">[mysql]</span><br><span class="hljs-attr">default-character-set</span>=utf8<br> <br><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">datadir</span>=/var/lib/mysql<br><span class="hljs-attr">socket</span>=/var/lib/mysql/mysql.sock<br><span class="hljs-attr">default-storage-engine</span>=INNODB<br><span class="hljs-attr">character_set_server</span>=utf8<br> <br><span class="hljs-attr">symbolic-links</span>=<span class="hljs-number">0</span><br> <br><span class="hljs-attr">log-error</span>=/var/log/mysqld.log<br><span class="hljs-attr">pid-file</span>=/var/run/mysqld/mysqld.pid<br></code></pre></td></tr></table></figure><h4 id="13-重启一下MySQL-令配置生效"><a href="#13-重启一下MySQL-令配置生效" class="headerlink" title="13 重启一下MySQL,令配置生效"></a>13 重启一下MySQL,令配置生效</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">service mysqld restart<br></code></pre></td></tr></table></figure><h4 id="14-防火墙开放3306端口"><a href="#14-防火墙开放3306端口" class="headerlink" title="14 防火墙开放3306端口"></a>14 防火墙开放3306端口</h4><p>注: 如果是腾讯云服务器, 需要在控制台中设置开放指定端口</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 查看防火墙状态</span><br>firewall-cmd --state<br><span class="hljs-comment"># 启动firewall</span><br>systemctl start firewalld.service<br><span class="hljs-comment"># 设置开机自启</span><br>systemctl <span class="hljs-built_in">enable</span> firewalld.service<br><span class="hljs-comment"># 重启防火墙</span><br>systemctl restart firewalld.service<br><br><span class="hljs-comment"># 开启3306端口</span><br>firewall-cmd <span class="hljs-attribute">--zone</span>=public <span class="hljs-attribute">--add-port</span>=3306/tcp --permanent<br>firewall-cmd --reload<br></code></pre></td></tr></table></figure><h4 id="15-卸载MySQL仓库"><a href="#15-卸载MySQL仓库" class="headerlink" title="15 卸载MySQL仓库"></a>15 卸载MySQL仓库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rpm -qa | grep mysql<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y remove mysql57-community-release-el7-10.noarch<br></code></pre></td></tr></table></figure><h4 id="16-数据库的操作"><a href="#16-数据库的操作" class="headerlink" title="16 数据库的操作"></a>16 数据库的操作</h4><h5 id="16-1-启停操作"><a href="#16-1-启停操作" class="headerlink" title="16.1 启停操作"></a>16.1 启停操作</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看mysql是否启动</span><br>service mysqld status<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动MySQL</span><br>service mysqld start<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">停止MySQL</span><br>service mysqld stop<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启mysql</span><br>service mysqld restart<br></code></pre></td></tr></table></figure><h5 id="16-2-查看临时密码"><a href="#16-2-查看临时密码" class="headerlink" title="16.2 查看临时密码"></a>16.2 查看临时密码</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">grep password /var/log/mysqld.log<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CentOS</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CentOS</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ORACLE使用统计</title>
    <link href="/2023/11/17/ORACLE%E4%BD%BF%E7%94%A8%E7%BB%9F%E8%AE%A1/"/>
    <url>/2023/11/17/ORACLE%E4%BD%BF%E7%94%A8%E7%BB%9F%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h4 id="oracle查询数据库总占用空间大小"><a href="#oracle查询数据库总占用空间大小" class="headerlink" title="oracle查询数据库总占用空间大小"></a>oracle查询数据库总占用空间大小</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(bytes)<span class="hljs-operator">/</span><span class="hljs-number">1024</span><span class="hljs-operator">/</span><span class="hljs-number">1024</span><span class="hljs-operator">/</span><span class="hljs-number">1024</span> <span class="hljs-keyword">as</span> &quot;size(G)&quot; <span class="hljs-keyword">from</span> dba_data_files<br></code></pre></td></tr></table></figure><h4 id="oracle查询数据库表个数"><a href="#oracle查询数据库表个数" class="headerlink" title="oracle查询数据库表个数"></a>oracle查询数据库表个数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> tabs;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> user_tables;<br></code></pre></td></tr></table></figure><h4 id="查询数据库版本信息"><a href="#查询数据库版本信息" class="headerlink" title="查询数据库版本信息"></a>查询数据库版本信息</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> v$version;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ORACLE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ORACLE创建查看权限用户</title>
    <link href="/2023/09/15/ORACLE%E5%88%9B%E5%BB%BA%E6%9F%A5%E7%9C%8B%E6%9D%83%E9%99%90%E7%94%A8%E6%88%B7/"/>
    <url>/2023/09/15/ORACLE%E5%88%9B%E5%BB%BA%E6%9F%A5%E7%9C%8B%E6%9D%83%E9%99%90%E7%94%A8%E6%88%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="oracle-创建查看权限账户"><a href="#oracle-创建查看权限账户" class="headerlink" title="oracle 创建查看权限账户"></a>oracle 创建查看权限账户</h1><h2 id="登录dba用户"><a href="#登录dba用户" class="headerlink" title="登录dba用户"></a>登录dba用户</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">sqlplus <span class="hljs-operator">/</span> <span class="hljs-keyword">as</span> sysdba<br></code></pre></td></tr></table></figure><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> vatms_view identified <span class="hljs-keyword">by</span> vatms_view <span class="hljs-keyword">default</span> tablespace vatms;<br></code></pre></td></tr></table></figure><h2 id="赋予连接权限"><a href="#赋予连接权限" class="headerlink" title="赋予连接权限"></a>赋予连接权限</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">grant</span> <span class="hljs-keyword">connect</span> <span class="hljs-keyword">to</span> vatms_view;<br></code></pre></td></tr></table></figure><h2 id="赋予创建同义词权限-可选"><a href="#赋予创建同义词权限-可选" class="headerlink" title="赋予创建同义词权限(可选)"></a>赋予创建同义词权限(可选)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">grant</span> <span class="hljs-keyword">create</span> synonym <span class="hljs-keyword">to</span> vatms_view;<br></code></pre></td></tr></table></figure><h2 id="授予查看vatms用户下表的权限"><a href="#授予查看vatms用户下表的权限" class="headerlink" title="授予查看vatms用户下表的权限"></a>授予查看vatms用户下表的权限</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">on</span> vatms.ts_user <span class="hljs-keyword">to</span> vatms_viwe;<br></code></pre></td></tr></table></figure><h2 id="创建同义词"><a href="#创建同义词" class="headerlink" title="创建同义词"></a>创建同义词</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> synonym vatms_view.ts_user <span class="hljs-keyword">for</span> vatms.ts_user;<br></code></pre></td></tr></table></figure><hr/><h2 id="查看用户下同义词"><a href="#查看用户下同义词" class="headerlink" title="查看用户下同义词"></a>查看用户下同义词</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> DBA_SYNONYMS <span class="hljs-keyword">WHERE</span> OWNER <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;VATMS&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="删除同义词"><a href="#删除同义词" class="headerlink" title="删除同义词"></a>删除同义词</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> SYNONYM VATMS_VIEW.TS_USER;<br></code></pre></td></tr></table></figure><h2 id="删除用户及用户下的所有表和视图"><a href="#删除用户及用户下的所有表和视图" class="headerlink" title="删除用户及用户下的所有表和视图"></a>删除用户及用户下的所有表和视图</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">user</span> vatms_view cascade;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ORACLE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ORACLE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ORACLE 逗号分隔列变多行</title>
    <link href="/2023/08/01/ORACLE_%E9%80%97%E5%8F%B7%E5%88%86%E9%9A%94%E5%88%97%E5%8F%98%E5%A4%9A%E8%A1%8C/"/>
    <url>/2023/08/01/ORACLE_%E9%80%97%E5%8F%B7%E5%88%86%E9%9A%94%E5%88%97%E5%8F%98%E5%A4%9A%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">MERGE</span> <span class="hljs-keyword">INTO</span> schema. <span class="hljs-keyword">table</span> alias<br><span class="hljs-keyword">USING</span> &#123; schema. <span class="hljs-keyword">table</span> <span class="hljs-operator">|</span> views <span class="hljs-operator">|</span> query&#125; alias<br><span class="hljs-keyword">ON</span> &#123;(条件) &#125;<br><span class="hljs-keyword">WHEN</span> MATCHED <span class="hljs-keyword">THEN</span><br>  <span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">SET</span> &#123;clause&#125;<br><span class="hljs-keyword">WHEN</span> <span class="hljs-keyword">NOT</span> MATCHED <span class="hljs-keyword">THEN</span><br>  <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">VALUES</span> &#123;clause&#125;;<br>————————————————<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ORACLE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ORACLE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ORACLE MERGE INTO</title>
    <link href="/2021/08/08/ORACLE_merge-into/"/>
    <url>/2021/08/08/ORACLE_merge-into/</url>
    
    <content type="html"><![CDATA[<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">MERGE</span> <span class="hljs-keyword">INTO</span> schema. <span class="hljs-keyword">table</span> alias<br><span class="hljs-keyword">USING</span> &#123; schema. <span class="hljs-keyword">table</span> <span class="hljs-operator">|</span> views <span class="hljs-operator">|</span> query&#125; alias<br><span class="hljs-keyword">ON</span> &#123;(条件) &#125;<br><span class="hljs-keyword">WHEN</span> MATCHED <span class="hljs-keyword">THEN</span><br>  <span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">SET</span> &#123;clause&#125;<br><span class="hljs-keyword">WHEN</span> <span class="hljs-keyword">NOT</span> MATCHED <span class="hljs-keyword">THEN</span><br>  <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">VALUES</span> &#123;clause&#125;;<br>————————————————<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ORACLE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ORACLE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java处理日期总结</title>
    <link href="/2021/01/16/java%E6%97%A5%E6%9C%9F%E5%A4%84%E7%90%86%E6%80%BB%E7%BB%93/"/>
    <url>/2021/01/16/java%E6%97%A5%E6%9C%9F%E5%A4%84%E7%90%86%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="获取当天零点日期"><a href="#获取当天零点日期" class="headerlink" title="获取当天零点日期"></a>获取当天零点日期</h4><p>以下方法可获取想要日期的零点的时间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql">DateFormat df <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> SimpleDateFormat(&quot;yyyy-MM-dd&quot;);<br><span class="hljs-comment">-- 获取昨天零点的日期</span><br>Calendar c1 <span class="hljs-operator">=</span> Calendar.getInstance();<br>c1.add(Calendar.DATE, <span class="hljs-number">-1</span>);<br>long l1<span class="hljs-operator">=</span>df.parse(df.format(c1.getTime())).getTime();<br>System.out.println(&quot;昨天 &quot; <span class="hljs-operator">+</span> l1);<br><br><span class="hljs-comment">--  获取今天零点的日期</span><br>Calendar c2 <span class="hljs-operator">=</span> Calendar.getInstance();<br>c2.add(Calendar.DATE, <span class="hljs-number">0</span>);<br>long l2<span class="hljs-operator">=</span>df.parse(df.format(c2.getTime())).getTime();<br>System.out.println(&quot;今天 &quot; <span class="hljs-operator">+</span> l2);<br><br><span class="hljs-comment">--  获取明天零点的日期</span><br>Calendar c3 <span class="hljs-operator">=</span> Calendar.getInstance();<br>c3.add(Calendar.DATE, <span class="hljs-number">1</span>);<br>long l3<span class="hljs-operator">=</span>df.parse(df.format(c3.getTime())).getTime();<br>System.out.println(&quot;明天 &quot; <span class="hljs-operator">+</span> l3);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ORACLE常用语句</title>
    <link href="/2020/11/09/ORACLE%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5/"/>
    <url>/2020/11/09/ORACLE%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h4 id="查询数据库操作记录"><a href="#查询数据库操作记录" class="headerlink" title="查询数据库操作记录"></a>查询数据库操作记录</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- ORACLE 查询数据库操作记录</span><br><span class="hljs-keyword">SELECT</span> T.SQL_TEXT, T.FIRST_LOAD_TIME <span class="hljs-keyword">FROM</span> V$SQLAREA T<br><span class="hljs-keyword">WHERE</span> T.FIRST_LOAD_TIME <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;2077-12-23%&#x27;</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> T.FIRST_LOAD_TIME <span class="hljs-keyword">DESC</span><br></code></pre></td></tr></table></figure><h4 id="查询某个时间下的数据"><a href="#查询某个时间下的数据" class="headerlink" title="查询某个时间下的数据"></a>查询某个时间下的数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- ORACLE 查询某一时间时数据库的值</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> TABLE_NAME <span class="hljs-keyword">AS</span> <span class="hljs-keyword">OF</span> <span class="hljs-type">TIMESTAMP</span> TO_TIMESTAMP(<span class="hljs-string">&#x27;2077-1-7 13:27:17&#x27;</span>, <span class="hljs-string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="修改序列起始值"><a href="#修改序列起始值" class="headerlink" title="修改序列起始值"></a>修改<font color="deeppink">序列</font>起始值</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">ALTER</span> SEQUENCE TARGET_SEQ INCREMENT <span class="hljs-keyword">BY</span> <span class="hljs-number">100000</span>;<br><span class="hljs-keyword">SELECT</span> TARGET_SEQ.NEXTVAL <span class="hljs-keyword">FROM</span> DUAL;<br><span class="hljs-keyword">ALTER</span> SEQUENCE TARGET_SEQ INCREMENT <span class="hljs-keyword">BY</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ORACLE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ORACLE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用MySQL优化</title>
    <link href="/2020/05/29/MySQLSqloptimize/"/>
    <url>/2020/05/29/MySQLSqloptimize/</url>
    
    <content type="html"><![CDATA[<h3 id="EXPLAIN"><a href="#EXPLAIN" class="headerlink" title="EXPLAIN"></a>EXPLAIN</h3><p>做MySQL优化，我们要善用EXPLAIN查看SQL执行计划。</p><p>下面来个简单的示例，标注（1，2，3，4，5）我们需要重点关注的数据。</p><p><img src="/./MySQLSqloptimize/image-20231207094912520.png" alt="image-20231207094912520"></p><ol><li>type列，连接类型。一个好的sql语句至少要达到range级别。避免出现ALL级别。</li><li>key列，使用到的索引名。如果没有索引将显示NULL</li><li>key_len列，索引长度</li><li>rows列，扫描行数。该值为预估值</li><li>extra列，详细说明。注意:常见的不太友好的值有Using filesort，Using temporary</li></ol><h3 id="SQL语句中IN包含的值不应过多"><a href="#SQL语句中IN包含的值不应过多" class="headerlink" title="SQL语句中IN包含的值不应过多"></a>SQL语句中IN包含的值不应过多</h3><p>MySQL对于IN做了相应的优化，即将IN中的常量全部存到一个排好序数组里面。但是当数值较多时将会产生很大的消耗。</p><p>如<code>select id from table_name where id in(1,2,3)</code>这种连续的值，应当使用between代替。</p><h3 id="SELECT语句务必指定字段名称"><a href="#SELECT语句务必指定字段名称" class="headerlink" title="SELECT语句务必指定字段名称"></a>SELECT语句务必指定字段名称</h3><ul><li>select * 增加了很多不必要的消耗，如cpu、io、内存、网络带宽。</li><li>增加了使用覆盖索引的可能性</li><li>当表结构发生变化时，查询的字段也应当更新。</li></ul><h3 id="只查询一条语句时添加limit-1"><a href="#只查询一条语句时添加limit-1" class="headerlink" title="只查询一条语句时添加limit 1"></a>只查询一条语句时添加limit 1</h3><p>这样可以时EXPLAIN中的type列达到const类型</p><h3 id="排序字段没有用索引，少使用排序"><a href="#排序字段没有用索引，少使用排序" class="headerlink" title="排序字段没有用索引，少使用排序"></a>排序字段没有用索引，少使用排序</h3><h3 id="限制条件中其它字段没有索引，尽量少用or"><a href="#限制条件中其它字段没有索引，尽量少用or" class="headerlink" title="限制条件中其它字段没有索引，尽量少用or"></a>限制条件中其它字段没有索引，尽量少用or</h3><p>or两边的字段中，如果有一个不是索引字段，而其他条件也不是索引字段，会造成不走索引的情况。很多时候使用union all或者是union（必要的时候）的方式来代替or会得到更好的效果。</p><h3 id="尽量用union-all代替union"><a href="#尽量用union-all代替union" class="headerlink" title="尽量用union all代替union"></a>尽量用union all代替union</h3><p>union和union all的差异主要是前者需要将结果集合并后再进行唯一性过滤操作，这回涉及到排序，增加大量的CPU运算，加大资源消耗及延迟。当然，union all的前提条件是两个结果集中没有重复数据。</p><h3 id="不要使用ORDER-By-RAND"><a href="#不要使用ORDER-By-RAND" class="headerlink" title="不要使用ORDER By RAND()"></a>不要使用ORDER By RAND()</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> `table_name` <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> rand() limit <span class="hljs-number">1000</span>;<br></code></pre></td></tr></table></figure><p>上面的sql语句，可优化为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> `table_name` t1 <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> rand() <span class="hljs-operator">*</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(id) <span class="hljs-keyword">from</span> `table_name`) <span class="hljs-keyword">as</span> nid) t2 <span class="hljs-keyword">on</span> t1.id <span class="hljs-operator">&gt;</span> t2.nid limit <span class="hljs-number">1000</span>;<br></code></pre></td></tr></table></figure><h3 id="区分in和exists，not-in和not-exists"><a href="#区分in和exists，not-in和not-exists" class="headerlink" title="区分in和exists，not in和not exists"></a>区分in和exists，not in和not exists</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> table_a <span class="hljs-keyword">when</span> id <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> table_b)<br></code></pre></td></tr></table></figure><p>上面sql语句相当于</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> table_a <span class="hljs-keyword">when</span> <span class="hljs-keyword">exists</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> table_b <span class="hljs-keyword">where</span> table_b.id <span class="hljs-operator">=</span> table_a.id)<br></code></pre></td></tr></table></figure><p>区分in和exists主要是造成了驱动顺序的改变，如果是exists，那么以外层表为驱动表，先被访问，如果是in，那么先执行子查询。所以in适合外表大而内表小的情况；exists适合外表小而内标大的情况。</p><p>关于not in和not exists，推荐使用not exists，不仅仅是效率问题，not in可能存在逻辑问题。</p><p>原sql语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> colname ... <span class="hljs-keyword">from</span> table_a a <span class="hljs-keyword">where</span> a.id <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> (selct b.id <span class="hljs-keyword">from</span> table_b b)<br></code></pre></td></tr></table></figure><p>高效的语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> colname ... <span class="hljs-keyword">from</span> table_a a <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> table_b b <span class="hljs-keyword">where</span> a.id <span class="hljs-operator">=</span> b.id <span class="hljs-keyword">where</span> b.id <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span><br></code></pre></td></tr></table></figure><p>即取出a表不在b表中的数据。</p><h3 id="优化分页方式提升效率"><a href="#优化分页方式提升效率" class="headerlink" title="优化分页方式提升效率"></a>优化分页方式提升效率</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id,name <span class="hljs-keyword">from</span> table_name limit <span class="hljs-number">999888</span>,<span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><p>上述sql语句做分页时，随着表数据量的增加，分页的偏移量也越来越大，导致limit分页查询将会越来越慢。</p><p>优化的方式如下：可以取前一页的最大行数的id，然后根据这个最大的id来限制下一页的起点。比如此栗中，上一页最大的id时999888，sql语句可以使用where先把钱999888条数据筛选掉再通过limit取30条数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">selct id,name <span class="hljs-keyword">from</span> table_name <span class="hljs-keyword">where</span> id <span class="hljs-operator">&gt;</span> <span class="hljs-number">999888</span> limit <span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><h3 id="分段查询"><a href="#分段查询" class="headerlink" title="分段查询"></a>分段查询</h3><p>在一些用户选择页面中，可能一些用户选择的时间范围过大，造成查询缓慢。  </p><p>主要的原因时扫描行数过多。这个使用可以通过程序，分段进行查询，循环遍历，将结果合并处理进行展示。  </p><p>比如查询扫描的行数到达百万级以上的时候就可以使用分段查询</p><h3 id="避免在where子句中对字段进行null值判断"><a href="#避免在where子句中对字段进行null值判断" class="headerlink" title="避免在where子句中对字段进行null值判断"></a>避免在where子句中对字段进行null值判断</h3><p>对于null的判断会导致引擎放弃使用索引而进行全表扫描。</p><h3 id="不建议使用-前缀模糊查询"><a href="#不建议使用-前缀模糊查询" class="headerlink" title="不建议使用%前缀模糊查询"></a>不建议使用%前缀模糊查询</h3><p>例如LIKE ‘%name’ 或 LIKE ‘%name%’, 这种查询会导致索引失效而进行全表扫描。但是使用’name%’不会导致索引失效。</p><p>可以使用全文索引来高效率查询’%name%’.</p><p>创建全文索引的sql语句是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `table_name` <span class="hljs-keyword">ADD</span> FULLTEXT INDEX `idx_user_name` (`user_name`);<br></code></pre></td></tr></table></figure><p>使用全文索引的sql语句是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id,fnum,fdst <span class="hljs-keyword">from</span> table_name <span class="hljs-keyword">where</span> <span class="hljs-keyword">match</span>(user_name) against(<span class="hljs-string">&#x27;zhangsan&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-type">boolean</span> mode);<br></code></pre></td></tr></table></figure><p>注意：在需要创建全文索引之前，要和项目组长进行确认是否可以创建。同时也要注意查询语句的写法与普通索引的区别。</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://segmentfault.com/a/1190000012155267">https://segmentfault.com/a/1190000012155267</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis入门-初识mybatis</title>
    <link href="/2020/05/06/Mybatis%E5%85%A5%E9%97%A8-%E5%88%9D%E8%AF%86mybatis/"/>
    <url>/2020/05/06/Mybatis%E5%85%A5%E9%97%A8-%E5%88%9D%E8%AF%86mybatis/</url>
    
    <content type="html"><![CDATA[<h3 id="初识MyBatis"><a href="#初识MyBatis" class="headerlink" title="初识MyBatis"></a>初识MyBatis</h3><p>mybatis是一个可以自定义SQL,存储过程和高级映射的持久层框架。之前叫做ibatis。</p><h3 id="MyBatis是什么？"><a href="#MyBatis是什么？" class="headerlink" title="MyBatis是什么？"></a>MyBatis是什么？</h3><p>学习一样技术，我们首先应该了解他能做什么，能解决什么问题。MyBatis是一个持久层的框架。持久层就是MVC模式中的dao层。负责与数据库进行交互。它可以建立数据库表和系统中的对象的一对一映射关系。这种框架我们称之为orm框架。不过MyBatis不像Hibernate那样可以自动生成sql语句，需要我们自己手写SQL语句，并且建立实体类和数据库的映射，所以MyBatis是一个半自动的持久层框架。</p><p>关于映射的含义，我们举个栗子说明一下。在数据库中有一个student表，里面有id，name，age，birthday，gender，class等字段，表中有一条数据，如下图。</p><p><img src="/student_database.png" alt="student"></p><p>而系统中也需要有一个与之对应的实体类。</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs lasso">@<span class="hljs-built_in">Data</span><br><span class="hljs-keyword">public</span> class Student &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 自增主键</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Integer</span> id;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 学生名称</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> name;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 年龄</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Integer</span> age;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 出生日期</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Data</span> birthday;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 性别</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Integer</span> gender;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 班级</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> classes;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们这个表中的数据，对应表中的代码的话，应该是一个Student的对象。这个对象的各个属性的值即为表中的拿一条数据。而框架通过我们的配置，将这个表中记录和这个类的对象建立一对一的关系。我们称之为映射。映射建立之后，我们可以通过操作这个对象实现对数据库的修改。这样在考虑业务逻辑的时候就可以不在考虑我们的数据库中的表是如何存储的，而是对实体对象进行操作，简化开发。  </p><p>那么，MyBatis这个框架可以做什么呢？  </p><p>其实很简单，无非就是对数据库的增删改查。这是每个持久层框架都应该支持的事情。SQL可以做的事情，mybatis基本上都可以做。</p><p>MyBatis如何使用，下面写一个简单SpringBoot项目演示。  </p><p>首先，在pom文件中添加Mybatis相关的坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--mybatis启动器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--druid连接池--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.21<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--mysql驱动--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>同时也要为项目添加web支持，坐标如下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>之后添加springboot启动类  </p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@SpringBootApplication</span><br><span class="hljs-variable">@MapperScan</span>(<span class="hljs-string">&quot;com.alan.dao&quot;</span>)<br>public class MybatisDemoApplication &#123;<br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">static</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">main</span>(String[] args) &#123;<br>        <span class="hljs-selector-tag">SpringApplication</span><span class="hljs-selector-class">.run</span>(MybatisDemoApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后建立Application.properties文件，添加如下配置。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">spring<span class="hljs-selector-class">.datasource</span>.driver-class-name=com<span class="hljs-selector-class">.mysql</span><span class="hljs-selector-class">.cj</span><span class="hljs-selector-class">.jdbc</span><span class="hljs-selector-class">.Driver</span><br>spring<span class="hljs-selector-class">.datasource</span>.url=jdbc:mysql:<span class="hljs-comment">//192.168.158.129:3306/mybatisdb</span><br>spring<span class="hljs-selector-class">.datasource</span>.username=root<br>spring<span class="hljs-selector-class">.datasource</span>.password=<span class="hljs-number">123456</span><br><br>spring<span class="hljs-selector-class">.datasource</span>.type=com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.druid</span><span class="hljs-selector-class">.pool</span><span class="hljs-selector-class">.DruidDataSource</span><br><br>mybatis.type-aliases-package=com<span class="hljs-selector-class">.alan</span><span class="hljs-selector-class">.entity</span><br>mybatis.mapper-locations=classpath:mapper<span class="hljs-comment">/*.xml </span><br></code></pre></td></tr></table></figure><p>然后我们在java目录下从创建entity，dao，service，controller包。项目结构如下图；</p><p><img src="/project_stucture.png" alt="structure">  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">16937756922340050L</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 自增主键</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 姓名</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 年龄</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> Object age;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 年龄</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> Object birthday;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 性别 0:男 1:女</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> Integer gender;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 班级</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> String classes;<br><br>    <span class="hljs-comment">//省略getter setter方法</span><br><br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentDao</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过ID查询单条数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id 主键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 实例对象</span><br><span class="hljs-comment">     */</span><br>    Student <span class="hljs-title function_">queryById</span><span class="hljs-params">(Integer id)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过ID查询单条数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id 主键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 实例对象</span><br><span class="hljs-comment">     */</span><br>    Student <span class="hljs-title function_">queryById</span><span class="hljs-params">(Integer id)</span>;<br><br>&#125;<br><br><span class="hljs-meta">@Service(&quot;studentService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">StudentService</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> StudentDao studentDao;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过ID查询单条数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id 主键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 实例对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Student <span class="hljs-title function_">queryById</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.studentDao.queryById(id);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;student&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentController</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 服务对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> StudentService studentService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过主键查询单条数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id 主键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 单条数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;selectOne&quot;)</span><br>    <span class="hljs-keyword">public</span> Student <span class="hljs-title function_">selectOne</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.studentService.queryById(id);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>需要注意要在resource目录下，创建mapper目录，并创建映射xml文件。namespace要对应dao所在的目录，id要与方法名一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;!DOCTYPE mapper PUBLIC <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;<br>&lt;mapper namespace=<span class="hljs-string">&quot;com.alan.dao.StudentDao&quot;</span>&gt;<br>    <br>    &lt;!--查询单个--&gt;<br>    &lt;select id=<span class="hljs-string">&quot;queryById&quot;</span> parameterType=<span class="hljs-string">&quot;int&quot;</span> resultType=<span class="hljs-string">&quot;student&quot;</span>&gt;<br>        select<br>          id, name, age, birthday, gender, classes<br>        from student<br>        <span class="hljs-type">where</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> #&#123;id&#125;<br>    &lt;/select&gt;<br>&lt;/mapper&gt;<br></code></pre></td></tr></table></figure><p>最后我们在postman测试seleceOne方法，返回结果如下。</p><p><img src="/result.png" alt="result"></p>]]></content>
    
    
    <categories>
      
      <category>MyBatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MyBatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring常用注解</title>
    <link href="/2020/04/09/Spring%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/"/>
    <url>/2020/04/09/Spring%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="Spring部分"><a href="#Spring部分" class="headerlink" title="Spring部分"></a>Spring部分</h3><h4 id="声明bean的注解"><a href="#声明bean的注解" class="headerlink" title="声明bean的注解"></a>声明bean的注解</h4><ul><li><strong>@Component组件</strong>  没有明确的角色</li><li><strong>@Service</strong>  在业务逻辑层使用(service层)</li><li><strong>@Repository</strong>  在数据访问层使用(dao层)</li><li><strong>@Controller</strong>  在控制层使用(Controller层)</li></ul><h4 id="注入bean的注解"><a href="#注入bean的注解" class="headerlink" title="注入bean的注解"></a>注入bean的注解</h4><ul><li><strong>@Autowired</strong> :由<em>spring</em>提供</li><li><strong>@Inject</strong>: 由<em>JSR-330</em>提供</li><li><strong>@Resource</strong> : 由<em>JSR-250</em>提供</li></ul><p>都可以注解在set方法和属性上,推荐注解在属性上,这样更加一目了然,代码更简洁.</p><h4 id="java配置类相关注解"><a href="#java配置类相关注解" class="headerlink" title="java配置类相关注解"></a>java配置类相关注解</h4><ol><li><p><strong>@Configuration</strong> 声明当前类为配置类,相当于xml形式的spring配置(类上)</p></li><li><p><strong>@Bean</strong> 注解在方法上,声明当前方法的返回值为一个bean,替代xml中的方式(方法上)</p></li><li><p><strong>@ComponentScan</strong> 用于对Component进行扫描</p></li><li><p><strong>@WishlyCofiguration</strong> 为*@Configuration* 与 <em>@ComponentScan</em>的组合注解</p></li></ol><h4 id="AOP相关注解"><a href="#AOP相关注解" class="headerlink" title="AOP相关注解"></a>AOP相关注解</h4><p>Spring支持AspeccJ的注解式切面编程.</p><p><strong>@Aspect</strong> 声明一个切面(类上)</p><p>使用@After @Before @Around定义建言(advice), 可直接将拦截规则(切点)作为参数</p><ul><li>@After 在方法执行之后执行</li><li>@Before 在方法执行之前执行</li><li>@Around 在方法执行之前和之后执行</li></ul><p>@PointCut声明切点</p><p>在java配置类中使用@EnableAspectJAutoProxy注解开启Spring对AspectJ代理的支持.(类上)</p><h4 id="Bean的属性支持"><a href="#Bean的属性支持" class="headerlink" title="@Bean的属性支持"></a>@Bean的属性支持</h4><p>@Scope设置Spring容器如何新建Bean实例(方法上,需要有@Bean)</p><p>其设置包括:</p><ul><li>Singleton (单例,一个Spring容器中只有一个bean实例,默认模式)</li><li>Protetype (每次调用新建一个bean)</li><li>request (web项目中,给每个http request新建一个bean)</li><li>Session (web项目中,给每个http session新建一个bean)</li><li>GlobalSession (给每一个Global http session新建一个Bean实例)</li></ul><p>@StepScope 在Spring Batch中还有涉及</p><p>@PostConstruct 由JSR-250提供,在构造函数执行完之后执行,等价于xml配置文件中bean的initMethod.</p><p>@PreDestory 由JSR-250提供,在Bean销毁之前执行,等价于xml配置文件中bean的destroyMethod.</p><h4 id="Value注解"><a href="#Value注解" class="headerlink" title="@Value注解"></a>@Value注解</h4><p>@Value 为属性注入值(属性上)</p><p>支持如下方式的注入</p><p>注入普通字符</p><pre><code class="hljs">@value(&quot;Alan Walker&quot;)String name;</code></pre><p>注入操作系统属性</p><pre><code class="hljs">@Value(&quot;#&#123;systemProperties[&#39;os.name]&#125;&quot;)String osName;</code></pre><p>注入表达式结果</p><pre><code class="hljs">@Value(&quot;#&#123;T(java.lang.Math).random() * 100&#125;&quot;)String randomNumber;</code></pre><p>注入其他bean属性</p><pre><code class="hljs">@Value(&quot;#&#123;domeClass.name&#125;&quot;)String name;</code></pre><p>注入文件资源</p><pre><code class="hljs">@Value(&quot;classpath:com/hello/demo.txt&quot;)String Resource file;</code></pre><p>注入配置文件</p><pre><code class="hljs">@Value(&quot;@&#123;student.name&#125;&quot;)String studentName;</code></pre><p>注入配置的使用方法:</p><ol><li>编写配置文件(test.properties)</li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">student.name</span> = <span class="hljs-string">&quot;张三&quot;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>@PropertySource加载配置文件(类上)</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@PropertySource(<span class="hljs-string">&quot;classpath:com/hello/test/test.properties&quot;</span>)</span><br></code></pre></td></tr></table></figure><ol start="3"><li>还需要配置一个PropertySourcePlaceholderConfigurer的bean.</li></ol><h4 id="环境切换"><a href="#环境切换" class="headerlink" title="环境切换"></a>环境切换</h4><p><strong>@Profile</strong>通过设定Environment的ActiveProfiles来设定当前context需要使用的配置环境.(类或方法上)</p><p><strong>@Conditional</strong> Spring4中可以使用词注解定义条件化的bean,通过实现Condition接口,并重写matches方法,从而决定该bean是否被实例化.(方法上)</p><h4 id="异步相关"><a href="#异步相关" class="headerlink" title="异步相关"></a>异步相关</h4><p>@EnableAsync 配置类中,通过从注解开启对异步任务的支持.</p><p>@Async 在实际执行的bean方法使用该注解来申明其是一个异步任务(方法上或类上所有的方法都将异步,需要@EnableAsync开启异步任务)</p><h4 id="定时任务相关"><a href="#定时任务相关" class="headerlink" title="定时任务相关"></a>定时任务相关</h4><p>@EnableScheduling 在配置类上使用,开启计划任务的支持(类上)</p><p>@Scheduled 来申明这是一个任务,包括cron.fixDelay.fixRate等类型(方法上,需开启计划任务的支持)</p><h4 id="Enable-注解说明"><a href="#Enable-注解说明" class="headerlink" title="@Enable*注解说明"></a>@Enable*注解说明</h4><ul><li>@EnableAspectJAutoproxy 开启对AspectJ自动代理的支持</li><li>@EnableAsync 开启异步方法的支持</li><li>@EnableScheduling 开启计划任务的支持</li><li>@EnableWebMvc 开启Web MVC的配置支持</li><li>@EnableConfigurationProperties 开启对@ConfigurationProperties注解配置Bean的支持</li><li>@EnableJpaRepositories 开启对SpringData JPA Repository的支持</li><li>@EnableTransactionManagement 开启注解式事务的支持</li><li>@EnableCaching 开启注解式的缓存支持</li></ul><h4 id="测试相关注解"><a href="#测试相关注解" class="headerlink" title="测试相关注解"></a>测试相关注解</h4><p>@RunWith运行器,Spring中通常用于对JUnit的支持</p><pre><code class="hljs">@RunWith(SpringJUnit4ClassRunner.class)</code></pre><p>@ContextConfiguration 用来加载配置ApplicationContext,其中classes属性用来加载配置类</p><pre><code class="hljs">@ContextConfiguration(classes=&#123;TestConfig.class&#125;)</code></pre><h3 id="SpringMVC-部分"><a href="#SpringMVC-部分" class="headerlink" title="SpringMVC 部分"></a>SpringMVC 部分</h3><p><strong>@EnableWebMvc</strong>  </p><p>在配置类中开启Web MVC的配置支持</p><p><strong>@Controller</strong>  </p><p>声明该类为SpringMVC中的Controller</p><p><strong>@ResponseBody</strong>  </p><p>支持将返回值放到Response内,而不是一个页面,通常用户返回json数据(返回值旁或方法上)</p><p><strong>@RequestBody</strong>  </p><p>允许request的参数在request体中,而不是在直接连接在地址后面.(放在参数前)</p><p><strong>@PathVariable</strong>  </p><p>用于接收路径参数,如@RequestMapping(“hello&#x2F;{name}”)申明的路径,将注解放在参数前,即可获取该值,通常作为Restful的接口实现方法.</p><p><strong>@RestController</strong>  </p><p>该注解为一个组合注解,相当与@Controller和ResponseBody的组合,注解在类上,意味着该Controller的所有方法都默认加上了@ResponseBody.</p><p><strong>@ControllerAdvice</strong>  </p><p>通过该注解,我们可以对于控制器的全局配置放置在同一个位置,注解了@Controller的类的方法可以使用@ExceptionHandler @InitBinder @ModelAttribute注解到方法上,这对所有注解了@RequestMapping的控制器内的方法有效.</p><p><strong>@ExceptionHandler</strong>  </p><p>用于全局处理控制器里的异常.</p><p><strong>@ModelAttribute</strong>  </p><p>注解到方法上,将数据添加到模型对象中，用于视图页面展示时使用@ModelAttribute等价于 model.addAttribute(“attributeName”, abc);</p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git项目部署</title>
    <link href="/2020/01/15/DeployProject/"/>
    <url>/2020/01/15/DeployProject/</url>
    
    <content type="html"><![CDATA[<ul><li><p>点击 + 按钮选择新建仓库<br><img src="/./DeployProject/image-20231207103755188-1701917785998-2.png" alt="image-20231207103755188"><br><img src="/./DeployProject/image-20231207103736243-1701917785999-3.png" alt="image-20231207103736243"><br><img src="/./DeployProject/image-20231207103706145-1701917785999-4.png" alt="image-20231207103706145"></p></li><li><p>初始化本地仓库</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure></li><li><p>关联本地仓库与远程仓库</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git remote add origin https:<span class="hljs-regexp">//gi</span>tee.com<span class="hljs-regexp">/xxx/</span>testRepository.git<br></code></pre></td></tr></table></figure></li><li><p>在push之前先pull</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git pull origin <span class="hljs-keyword">master</span> <span class="hljs-title">--allow-unrelated-histories</span><br></code></pre></td></tr></table></figure></li><li><p>将本地仓库push到远程仓库</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git add .<br>git commit -m &#x27;<span class="hljs-built_in">first</span> commit&#x27;<br>git <span class="hljs-built_in">push</span> -u <span class="hljs-built_in">origin</span> master<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL与ORACLE的区别</title>
    <link href="/2019/11/27/ORACLE%E5%92%8CMySQL%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2019/11/27/ORACLE%E5%92%8CMySQL%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h4 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h4><p>Mysql轻巧、免费、开源，适合不是特别大的大型项目<br>Oracle则比较庞大,整个体系也十分健全,适合大型项目或预算充足的项目.</p><h4 id="详述"><a href="#详述" class="headerlink" title="详述"></a>详述</h4><ol><li><p>Oracle是大型数据库, Mysql是中小型数据库</p></li><li><p>Oracle占用内存空间大, Mysql占用空间小</p></li><li><p>Oracle支持大并发访问量,是联机事务处理最好的工具, Mysql并发小,面对大访问量可以使用分表分库优化方式优化</p></li><li><p>Oracle没有自动增长类型, Mysql一般使用自动增长类型</p></li><li><p>Oracle实现了ANSII SQL中事务的隔离级别、传播特性等比Mysql强</p></li><li><p>Mysql的非空字段有空的内容，Oracle里定义了非空字段就不允许有空的内容。</p></li><li><p>Oracle处理分页SQL语句比较繁琐,需要使用到伪列ROWNUM和嵌套查询，Mysql可以使用limit关键字更加优雅的处理分页</p></li><li><p>Mysql安装卸载简单, 而Oracle则是请神容易送神难. 卸载干净很麻烦</p></li><li><p>Mysql事务默认自动提交, 而oracle默认不自动提交,需要用户手动提交事务.</p></li><li><p>在对事务的支持上,Mysql在innodb存储引擎的行级锁的情况下才支持事务,而oracle则完全支持事务.</p></li><li><p>关于保存数据的持久性方面, Mysql在数据更新时进行重启可能造成数据丢失. Oracle把提交的sql操作存到了在线联机日志中,保存到了磁盘上,可以随时恢复</p></li><li><p>MySQL:复制服务器配置简单，但主库出问题时, 丛库有可能丢失一定的数据. 且需要手工切换丛库到主库. Oracle:既有推或拉式的传统数据复制, 也有dataguard的双机或多机容灾机制, 主库出现问题是，可以自动切换备库到主库, 但配置管理较复杂.</p></li></ol><h5 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h5><ul><li><p>Mysql默认隔离级别是repeatable</p></li><li><p>Oracle默认隔离级别是read commited</p></li></ul><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><h5 id="为什么mysql使用repeatable而不是read-committed"><a href="#为什么mysql使用repeatable而不是read-committed" class="headerlink" title="为什么mysql使用repeatable而不是read committed?"></a>为什么mysql使用repeatable而不是read committed?</h5><p>  在 5.0之前只有statement一种格式, 而主从复制存在了大量的不一致, 故选用repeatable</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://www.cnblogs.com/xu-cceed3w/p/8824199.html">https://www.cnblogs.com/xu-cceed3w/p/8824199.html</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
      <category>ORACLE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>ORACLE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GET传参最大长度理解误区</title>
    <link href="/2019/11/19/GET%E4%BC%A0%E5%8F%82%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6%E7%90%86%E8%A7%A3%E8%AF%AF%E5%8C%BA/"/>
    <url>/2019/11/19/GET%E4%BC%A0%E5%8F%82%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6%E7%90%86%E8%A7%A3%E8%AF%AF%E5%8C%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p>HTTP协议并未规定GET和POST的长度限制</p></li><li><p>GET的最大长度是因为浏览器和WEB服务器限制了URL的长度</p></li><li><p>不同的浏览器和WEB服务器,限制的最大长度不一样</p></li><li><p>要支持IE, 则最大长度为2083byte, 若只支持Chrome, 则最大长度 8182byte</p></li></ul><h3 id="理解误区"><a href="#理解误区" class="headerlink" title="理解误区"></a>理解误区</h3><p>最常用的请求为GET请求和POST请求.</p><p><font color="deeppink">理解误区:HTTP协议下的GET请求参数是有大小限制的,最大不能超过XX,而POST是无限制的.</font></p><ol><li><p>首先即使有长度限制,也是限制的整个URI长度,而不仅仅是参数值</p></li><li><p>http协议下的GET请求并未规定整个URI的长度限制.</p></li><li><p>所谓的请求长度限制是由浏览器和Web服务器决定和设置的, 各种浏览器和web服务器的设定都不一样,这依赖于各个浏览器厂家的规定或者可以根据web服务器处理能力来设定</p></li></ol><h3 id="各个浏览器的最大长度总结"><a href="#各个浏览器的最大长度总结" class="headerlink" title="各个浏览器的最大长度总结"></a>各个浏览器的最大长度总结</h3><h4 id="IE"><a href="#IE" class="headerlink" title="IE"></a>IE</h4><p>IE浏览器对url的长度限制是2083,超过这个限制将自动截断(若是form提交则form提交按钮不起作用)</p><h4 id="firefox"><a href="#firefox" class="headerlink" title="firefox"></a>firefox</h4><p>火狐浏览器的url长度限制是65536字符,但实际上有效的最大长度不少于100 000个字符.</p><h4 id="chrome"><a href="#chrome" class="headerlink" title="chrome"></a>chrome</h4><p>谷歌浏览器的url长度限制超过8182个字符返回414错误</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>414 Request-URI Too Large<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">&quot;white&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>414 Request-URI Too Large<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span>nginx<span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="Safari"><a href="#Safari" class="headerlink" title="Safari"></a>Safari</h4><p>safari的url长度限制为80 000字符</p><h4 id="Opera"><a href="#Opera" class="headerlink" title="Opera"></a>Opera</h4><p>Opera浏览器的url长度限制为190 000 字符.Opera 9 地址栏中输入190 000字符时依然能正常编辑</p><h3 id="web服务器最大长度限制"><a href="#web服务器最大长度限制" class="headerlink" title="web服务器最大长度限制"></a>web服务器最大长度限制</h3><h4 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h4><p>Apache接受url长度限制为8192字符</p><h4 id="IIS"><a href="#IIS" class="headerlink" title="IIS"></a>IIS</h4><p>Microsoft Internet Information Server能接受的最大url长度为16384个字符.可以通过以下代码修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">configuration/system.webServer/security/requestFilteringrequestLimits<span class="hljs-meta">@maxQueryStringsetting</span>.&lt;requestLimits maxQueryString=<span class="hljs-string">&quot;length&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><h4 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h4><p>可以通过修改配置来改变url请求的长度限制</p><p>client_header_buffer_size 默认值：client_header_buffer_size 1k<br>large_client_header_buffers默认值 ：large_client_header_buffers 4 4k&#x2F;8k</p><blockquote><p>由于jsonp跨域请求只能通过get请求，url长度根据浏览器及服务器的不同而有不同限制。<br>若要支持IE的话，url长度限制为2083字符，若是中文字符的话只有2083&#x2F;9&#x3D;231个字符。<br>若是Chrome浏览器支持的最大中文字符只有8182&#x2F;9&#x3D;909个。</p></blockquote><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><p><a href="https://github.com/zhongxia245/blog/issues/35">GET传参最大长度的理解误区</a></p></li><li><p><a href="https://my.oschina.net/leejun2005/blog/136820">关于 HTTP GET&#x2F;POST 请求参数长度最大值的一个理解误区</a></p></li><li><p><a href="https://www.cnblogs.com/cuihongyu3503319/p/5892257.html">GET请求中URL的最大长度限制总结</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>HTTP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven</title>
    <link href="/2019/11/09/Maven/"/>
    <url>/2019/11/09/Maven/</url>
    
    <content type="html"><![CDATA[<h3 id="Maven是什么？"><a href="#Maven是什么？" class="headerlink" title="Maven是什么？"></a>Maven是什么？</h3><p>Maven是Apache下的一个纯java开发的一个开源项目，他是一个能够抽象构建过程，并且提供依赖管理，中央仓库，自动下载构建等功能的项目构建工具。</p><h3 id="为什么选择Maven工具构建项目？"><a href="#为什么选择Maven工具构建项目？" class="headerlink" title="为什么选择Maven工具构建项目？"></a>为什么选择Maven工具构建项目？</h3><p>可以解决项目中所有的jar包都需要统一导入和维护，后期维护难度极高的问题</p><p>假如我们在开发两个java项目，暂时称为A&amp;B，这两个项目中对于一些特殊功能会有一些特殊功能会有相互依赖的情况下，该如何做两者之间较好的关联呢？<br>A: 将公共的代码打包成jar引入项目中使用<br>缺点：后期进行代码更新需要对所有引入的jar包进行更新,繁琐.</p><h3 id="Maven如何进行jar的管理？"><a href="#Maven如何进行jar的管理？" class="headerlink" title="Maven如何进行jar的管理？"></a>Maven如何进行jar的管理？</h3><p>在maven这款工具里面，有一个概念称为坐标。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>例如上面的坐标信息<br>Group代表 该jar所属的实际项目，由于通常一个项目可能会划分为多个模块，因此artifactId则是对于该项目的某个模块进行了一个明确的标识。<br>Version元素更多的是定义了该构件的真实版本。通常我们会称呼这一段dependency为依赖</p><p>对于依赖的读取还有一个Scope的配置</p><blockquote><p>scope</p><blockquote><p>a. compile       默认，意味着该依赖纪要参与编译又要参与后期测试<br>b. test       标识该依赖仅仅参加测试有关的工作<br>c. provided       可以参与编译、测试、运行等周期，但是打包时会进行exclude的相应操作。其他方面和compile差异不大<br>d. runntime       在编译环节不会参与进来，个人感觉和compile差异不大<br>e. system       通常是指不从仓库中读取依赖，而是通过本地路径来读取依赖，通常与systemPath标签结合使用。</p></blockquote></blockquote><p>基于parent的依赖管理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><p>基于properties的依赖管理，在properties里面我们可以进行整个项目的统一字符集编码管理或者对于一些依赖jar包统一版本号的管理</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;properties&gt;</span><br><span class="hljs-section">&lt;project.build.sourceEncoding&gt;</span><span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>&lt;/project.build.sourceEncoding&gt;<br><span class="hljs-section">&lt;java.version&gt;</span><span class="hljs-attribute">1</span>.<span class="hljs-number">8</span>&lt;/java.version&gt;<br><span class="hljs-section">&lt;lombok.version&gt;</span><span class="hljs-attribute">1</span>.<span class="hljs-number">16</span>.<span class="hljs-number">6</span>&lt;/lombok.version&gt;<br><span class="hljs-section">&lt;mybatis.version&gt;</span><span class="hljs-attribute">3</span>.<span class="hljs-number">3</span>.<span class="hljs-number">0</span>&lt;/mybatis.version&gt;<br><span class="hljs-section">&lt;/properties&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Maven的仓库"><a href="#Maven的仓库" class="headerlink" title="Maven的仓库"></a>Maven的仓库</h3><p>当我们导入相应的依赖时，maven调用内部从网络上下载依赖的功能，我们成这个拥有依赖的平台为仓库。</p><blockquote><p>仓库</p><blockquote><p>a. 本地仓库   从网上下载下来的jar会存储在本地仓库<br>b. 第三方仓库  公司或内部搭建的公共仓库站点<br>c. 中央仓库  maven官方自己维护的一个远程公用仓库</p></blockquote></blockquote><p>可以通过尝试将mirror配置修改成访问阿里云镜像的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/goups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>nexus</strong>是一款较为强大的maven仓库管理工具，它极大的简化 了自己内部仓库的维护和外部仓库的访问。Nexus是一套开箱即用的系统，不需要配置数据库，它使用文件管理系统夹Lucene来组成数据。Nexus使用ExtJS来开发界面，利用Restlet来提供完整的REST APIs，通过m2eclipse与eclipse集成使用。Nexus支持WebDAV与LDAP安全身份认证。<br>除了Nexus以外，还有Jfrog Artifactory仓库管理工具</p><h3 id="Maven工程的项目结构是如何的呢？"><a href="#Maven工程的项目结构是如何的呢？" class="headerlink" title="Maven工程的项目结构是如何的呢？"></a>Maven工程的项目结构是如何的呢？</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">src</span><br>    <span class="hljs-selector-tag">a</span>. <span class="hljs-selector-tag">main</span><br>        <span class="hljs-selector-tag">i</span>. java<br>        ii. resources<br>    <span class="hljs-selector-tag">b</span>. test<br>        <span class="hljs-selector-tag">i</span>. java<br>        ii. resources<br></code></pre></td></tr></table></figure><p>通常的业务代码放在java下，测试在test目录下，resources放置yml，xml，properties等配置文件项目结构可能会因为idea的版本不同而有差异</p><h3 id="Maven的常用命令和生命周期？"><a href="#Maven的常用命令和生命周期？" class="headerlink" title="Maven的常用命令和生命周期？"></a>Maven的常用命令和生命周期？</h3><p>Maven本身有三套独立的生命周期和各自的职能，如下</p><table><thead><tr><th>clean</th><th>default</th><th>site</th></tr></thead><tbody><tr><td>清理</td><td>构建</td><td>建立站点</td></tr></tbody></table><p>Clean<br>    pre-clean  –&gt; clean  –&gt;  post-clean</p><p>常用命令</p><ol><li>mvn archetype:create   –&gt;    创建Maven项目</li><li>mvn compile                 –&gt;    编译源代码</li><li>mvn test-compile          –&gt;    编译测试代码</li><li>mvn test                        –&gt;    运行应用程序中的单元测试</li><li>mvn site                        –&gt;    生成项目相关信息的网点</li><li>mvn clean                     –&gt;    清除目标目录中的生成结果</li><li>mvn package                –&gt;    依据项目生成jar文件</li><li>mvn install                    –&gt;    在本地Repository中安装jar</li></ol><p><strong>通过profile文件来指定特定的编译环境</strong></p><p>在实际的项目开发过程中，我们通常会需要结合实际的应用场景切换不同的运行环境<br>dev、test、pre、pro，在不同的环境中读取不同的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 本地环境配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>dev<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">profiles.active</span>&gt;</span>dev<span class="hljs-tag">&lt;/<span class="hljs-name">profiles.active</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 测试环境配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">profiles.active</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">profiles.active</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 生产环境 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>pro<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">profiles.active</span>&gt;</span>pro<span class="hljs-tag">&lt;/<span class="hljs-name">profiles.active</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在pom文件里面配置以上相应的profile内容之后,在进入工程打包的时候默认通过mvn<br>clean package-Pdev(对应profile文件的id)的方式来判断不同环境下的读取方式</p>]]></content>
    
    
    <categories>
      
      <category>Maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lombok Document</title>
    <link href="/2019/06/16/LombokDocument/"/>
    <url>/2019/06/16/LombokDocument/</url>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><ul><li>lombok可以减少程序中冗长简单的代码，自动生成Getter、Setter、构造函数和hashCode等函数。</li></ul><h3 id="Use-Lombok-In-Intellij-IDEA"><a href="#Use-Lombok-In-Intellij-IDEA" class="headerlink" title="Use Lombok In Intellij IDEA"></a>Use Lombok In Intellij IDEA</h3><h4 id="Install-lombok-Plugin"><a href="#Install-lombok-Plugin" class="headerlink" title="Install lombok Plugin"></a>Install lombok Plugin</h4><p>通过Intellij的插件中心安装 settings &gt;&gt; Plugins</p><h4 id="Add-Dependency"><a href="#Add-Dependency" class="headerlink" title="Add Dependency"></a>Add Dependency</h4><p>在使用Lombok注解时需要在pom中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.16.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Lombok-features"><a href="#Lombok-features" class="headerlink" title="Lombok features"></a>Lombok features</h3><h4 id="val"><a href="#val" class="headerlink" title="val"></a>val</h4><p>你可以使用<code>val</code>来声明<strong>局部变量</strong>,不用声明变量的具体类型,编译器会根据初始化表达式中推断出当前局部变量的类型,同时此变量声明为<code>final</code>.初始化表达式是必需的,此功能仅适用于<strong>局部变量</strong>和<strong>foreach循环</strong>，不适用于<u>字段</u>。</p><h4 id="NonNull"><a href="#NonNull" class="headerlink" title="@NonNull"></a>@NonNull</h4><p>可以将<code>@NonNull</code>用在方法或者构造函数的参数上,<u>Lombok</u>将自动生成非空判断. 如果你使用<u>Lombok</u>生成了整个方法或者构造函数(比如<code>@Data</code>),<u>Lombok</u>会默认使用<code>@NonNull</code>修饰字段形成非空判断. 但是,如果你显式使用@NonNull修饰了自己的方法或构造函数上的参数,那么它将只在你修饰的参数上生成非空判断.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> lombok.NonNull;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NonNullExample</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Something</span> &#123;<br>  <span class="hljs-keyword">private</span> String name;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">NonNullExample</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Person person)</span> &#123;<br>    <span class="hljs-built_in">super</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br>    <span class="hljs-built_in">this</span>.name = person.getName();<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>$\Downarrow$$\Downarrow$相当于如下代码$\Downarrow$$\Downarrow$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.NonNull;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NonNullExample</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Something</span> &#123;<br>  <span class="hljs-keyword">private</span> String name;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">NonNullExample</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Person person)</span> &#123;<br>    <span class="hljs-built_in">super</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br>    <span class="hljs-keyword">if</span> (person == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>(<span class="hljs-string">&quot;person is marked @NonNull but is null&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">this</span>.name = person.getName();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Cleanup"><a href="#Cleanup" class="headerlink" title="@Cleanup"></a>@Cleanup</h4><p>自动管理资源，用在局部变量之前，在当前变量范围内即将执行完毕退出之前会自动清理资源，自动生成try-finally这样的代码流</p><h4 id="Getter-Setter"><a href="#Getter-Setter" class="headerlink" title="@Getter @Setter"></a>@Getter @Setter</h4><p>用在属性上，不需要自己手写Setter和getter方法了，还可以指定访问范围<br>将@Getter和@Setter注解在类上将会自动生成所有字段的getter和setter方法,如果不需要生成所有,可以在需要生成getter和setter的字段前修饰.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Getter;<br><span class="hljs-keyword">import</span> lombok.Setter;<br><br><span class="hljs-meta">@Getter</span> <span class="hljs-meta">@Setter</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String age;<br>    <span class="hljs-keyword">private</span> String gender;<br>&#125;<br></code></pre></td></tr></table></figure><p>$\Downarrow$$\Downarrow$相当于如下代码$\Downarrow$$\Downarrow$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String age;<br>    <span class="hljs-keyword">private</span> String gender;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(String age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getGender</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(String gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ToString"><a href="#ToString" class="headerlink" title="@ToString"></a>@ToString</h4><p>用在类上，可以自动复写<code>toString</code>方法，它将默认打印你的类名和所有字段并用逗号分隔.还可以添加其他的参数，例如@ToString( exclude &#x3D; “id” )排除id属性，或者使用<code>ToString.Inclued</code>和 <code>ToString.Exclude</code>来控制打印或不打印指定字段.<br>@ToString(callSuper&#x3D;true,includeFieldNames&#x3D;true)调用父类的toString方法，包含所有属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.ToString;<br><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ToStringExample</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">STATIC_VAR</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>  <span class="hljs-keyword">private</span> String name;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">Shape</span> <span class="hljs-variable">shape</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Square</span>(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>);<br>  <span class="hljs-keyword">private</span> String[] tags;<br>  <span class="hljs-meta">@ToString</span>.Exclude <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>  <br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name;<br>  &#125;<br>  <br>  <span class="hljs-meta">@ToString(callSuper=true, includeFieldNames=true)</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Square</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> width, height;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Square</span><span class="hljs-params">(<span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)</span> &#123;<br>      <span class="hljs-built_in">this</span>.width = width;<br>      <span class="hljs-built_in">this</span>.height = height;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="EqualsAndHashCode"><a href="#EqualsAndHashCode" class="headerlink" title="@EqualsAndHashCode"></a>@EqualsAndHashCode</h4><p>用在类上，自动生成<code>equals</code>方法和<code>hashCode</code>方法</p><h4 id="NoArasConstructor"><a href="#NoArasConstructor" class="headerlink" title="@NoArasConstructor"></a>@NoArasConstructor</h4><p>自动生成<code>无参构造函数</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-meta">@NoArgsConstructor</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String age;<br>    <span class="hljs-keyword">private</span> String gender;<br>&#125;<br></code></pre></td></tr></table></figure><p>$\Downarrow$$\Downarrow$相当于如下代码$\Downarrow$$\Downarrow$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String age;<br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-comment">// 构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="AllAragsConstructor"><a href="#AllAragsConstructor" class="headerlink" title="@AllAragsConstructor"></a>@AllAragsConstructor</h4><p>生成全参构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String age;<br>    <span class="hljs-keyword">private</span> String gender;<br>&#125;<br></code></pre></td></tr></table></figure><p>$\Downarrow$$\Downarrow$相当于如下代码$\Downarrow$$\Downarrow$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String age;<br>    <span class="hljs-keyword">private</span> String gender;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, String age, String gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="RequiredArgsConstructor"><a href="#RequiredArgsConstructor" class="headerlink" title="@RequiredArgsConstructor"></a>@RequiredArgsConstructor</h4><p><code>@RequiredArgsConstructor</code>生成一个包含标识了<strong>NonNull</strong>的变量的构造方法</p><h4 id="Data"><a href="#Data" class="headerlink" title="@Data"></a>@Data</h4><p>注解在类上，相当于同时使用了@ToString，@EqualsAndHashCode，@Getter，@Setter和@RequiredArgsConstructor这些注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String firstname;<br>    <span class="hljs-keyword">private</span> String lastname;<br>&#125;<br></code></pre></td></tr></table></figure><p>$\Downarrow$$\Downarrow$相当于如下代码$\Downarrow$$\Downarrow$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String firstname;<br>    <span class="hljs-keyword">private</span> String lastname;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getFirstname</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> firstname;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getLastname</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> lastname;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFirstname</span><span class="hljs-params">(String firstname)</span> &#123;<br>        <span class="hljs-built_in">this</span>.firstname = firstname;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLastname</span><span class="hljs-params">(String lastname)</span> &#123;<br>        <span class="hljs-built_in">this</span>.lastname = lastname;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> <span class="hljs-number">7</span>;<br>        hash = <span class="hljs-number">17</span> * hash + Objects.hashCode(<span class="hljs-built_in">this</span>.firstname);<br>        hash = <span class="hljs-number">17</span> * hash + Objects.hashCode(<span class="hljs-built_in">this</span>.lastname);<br>        <span class="hljs-keyword">return</span> hash;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == obj) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (getClass() != obj.getClass()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Person</span> <span class="hljs-variable">other</span> <span class="hljs-operator">=</span> (Person) obj;<br>        <span class="hljs-keyword">if</span> (!Objects.equals(<span class="hljs-built_in">this</span>.firstname, other.firstname)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!Objects.equals(<span class="hljs-built_in">this</span>.lastname, other.lastname)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canEqual</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object other)</span> &#123;<br>        <span class="hljs-keyword">return</span> other <span class="hljs-keyword">instanceof</span> Person;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> + <span class="hljs-string">&quot;firstname=&quot;</span> + firstname + <span class="hljs-string">&quot;, lastname=&quot;</span> + lastname + <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h4><p>用在类上，是@Data的不可变形式，相当于属性为final声明，只提供getter方法，而不是提供setter方法</p><h4 id="Builder"><a href="#Builder" class="headerlink" title="@Builder"></a>@Builder</h4><p>可以让类的实例化通过一条语句链式生成,比如$\Downarrow$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Person.builder().name(<span class="hljs-string">&quot;Adam Savage&quot;</span>).city(<span class="hljs-string">&quot;San Francisco&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="Reference-Documents"><a href="#Reference-Documents" class="headerlink" title="Reference Documents"></a>Reference Documents</h3><ul><li><a href="https://projectlombok.org/features/all">https://projectlombok.org/features/all</a></li><li><a href="https://stevenmwesigwa.com/">https://stevenmwesigwa.com</a></li></ul><h3 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h3><p><a href="https://projectlombok.org/download" class="LinkCard">Lombok官方下载</a></p>]]></content>
    
    
    <categories>
      
      <category>Lombok</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Lombok</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java常用类之BigDecimal</title>
    <link href="/2019/06/06/BigDecimal/"/>
    <url>/2019/06/06/BigDecimal/</url>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>为了能精确表示、计算浮点数，Java提供了BigDecimal类，该类提供了大量的构造器用于创建BigDecimal对象，包括把所有的基本数值型变量转换成一个BigDecimal对象，也包括利用数字字符串、数字字符数组来创建BigDecimal对象。  </p><p>在数据库进行设计时要求表示金额的字段一律使用BigDecimal。</p><p>使用float或double两种浮点类型的话会因为精度丢失问题使金额在计算时可能出现不可意料的情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DoubleTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;0.05 + 0.01 =&quot;</span> + (<span class="hljs-number">0.05</span> + <span class="hljs-number">0.01</span>));<br>        System.out.println(<span class="hljs-string">&quot;1.0 - 0.42 =&quot;</span>+ (<span class="hljs-number">1.0</span> - <span class="hljs-number">0.42</span>));<br>        System.out.println(<span class="hljs-string">&quot;4.015 * 100 =&quot;</span> + (<span class="hljs-number">4.015</span> * <span class="hljs-number">100</span>));<br>        System.out.println(<span class="hljs-string">&quot;123.3 / 100 =&quot;</span>+(<span class="hljs-number">123.3</span> / <span class="hljs-number">100</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果如下：  </p><blockquote><p>0.05 + 0.01 &#x3D;0.060000000000000005<br>1.0 - 0.42 &#x3D;0.5800000000000001<br>4.015 * 100 &#x3D;401.49999999999994<br>123.3 &#x2F; 100 &#x3D;1.2329999999999999  </p></blockquote><p>从上面程序运行结果表明，Java的double类型会发生精度丢失，尤其在进行算术运算时更容易发生这种情况。不仅是Java，很多编程语言也存在这种问题。  </p><h3 id="Instance"><a href="#Instance" class="headerlink" title="Instance"></a>Instance</h3><p>必须使用double浮点数作为BigDecimal构造器的参数时，应避免直接将double浮点数作为构造器参数，二十通过BigDecimal.valueOf(double value)静态方法来创建BigDecimal对象。  </p><p>如果程序中要求对double浮点数进行加减乘除基本运算，则需要先将double类型数值包装成BigDecimal对象，调用BigDecimal对象的方法执行运算后在将结果转换成double类型变量。比较繁琐，可以考虑以BigDecimal为基础定义一个Arith工具类。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Arith</span> &#123;<br>    <span class="hljs-comment">// 默认除法运算精度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEF_DIV_SCALE</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-comment">// 构造器私有,使这个类不可实例化</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Arith</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 提供精确的加法运算</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> v1 被加数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> v2 加数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 两个参数的和</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">double</span> v1, <span class="hljs-type">double</span> v2)</span> &#123;<br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(v1);<br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(v2);<br>        <span class="hljs-keyword">return</span> b1.add(b2).doubleValue();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 提供精确的减法运算</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> v1 被减数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> v2 减数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 两个参数的差</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">sub</span><span class="hljs-params">(<span class="hljs-type">double</span> v1, <span class="hljs-type">double</span> v2)</span> &#123;<br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(v1);<br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(v2);<br>        <span class="hljs-keyword">return</span> b1.subtract(b2).doubleValue();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 提供精确的乘法运算</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> v1 被乘数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> v2 乘数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 两个参数的积</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">mul</span><span class="hljs-params">(<span class="hljs-type">double</span> v1, <span class="hljs-type">double</span> v2)</span> &#123;<br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(v1);<br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(v2);<br>        <span class="hljs-keyword">return</span> b1.multiply(b2).doubleValue();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 提供精确的除法运算</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> v1 被除数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> v2 除数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 两个参数的商</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">div</span><span class="hljs-params">(<span class="hljs-type">double</span> v1, <span class="hljs-type">double</span> v2)</span> &#123;<br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(v1);<br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(v2);<br>        <span class="hljs-keyword">return</span> b1.divide(b2, DEF_DIV_SCALE, <br>                BigDecimal.ROUND_HALF_UP).doubleValue();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;0.05 + 0.01 = &quot;</span> + Arith.add(<span class="hljs-number">0.05</span>, <span class="hljs-number">0.01</span>));<br>        System.out.println(<span class="hljs-string">&quot;1.0 - 0.42 = &quot;</span>+ Arith.sub(<span class="hljs-number">1.0</span>, <span class="hljs-number">0.42</span>));<br>        System.out.println(<span class="hljs-string">&quot;4.015 * 100 = &quot;</span> + Arith.mul(<span class="hljs-number">4.015</span>, <span class="hljs-number">100</span>));<br>        System.out.println(<span class="hljs-string">&quot;123.3 / 100 = &quot;</span>+ Arith.div(<span class="hljs-number">123.3</span>, <span class="hljs-number">100</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面main方法的结果如下：</p><blockquote><p>0.05 + 0.01 &#x3D; 0.06<br>1.0 - 0.42 &#x3D; 0.58<br>4.015 * 100 &#x3D; 401.5<br>123.3 &#x2F; 100 &#x3D; 1.233</p></blockquote><p>如上运行结果正是我们所期望的，这就是使用BigDecimal类的作用。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 8 Functional Interface</title>
    <link href="/2019/05/26/javaFunctionInterface/"/>
    <url>/2019/05/26/javaFunctionInterface/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是函数式接口"><a href="#什么是函数式接口" class="headerlink" title="什么是函数式接口"></a>什么是函数式接口</h3><ul><li>只包含一个抽象方法的接口，称为函数式接口</li><li>可以通过Lambda表达式来创建该接口的对象</li><li>可以在任意函数式接口上使用 @FunctionalInterface 注解，这样做可以检查它是否是一个函数式接口</li></ul><hr><h3 id="自定义函数式接口"><a href="#自定义函数式接口" class="headerlink" title="自定义函数式接口"></a>自定义函数式接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyNumber</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">myFunc</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getValue</span><span class="hljs-params">(T t)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="作为参数传递Lambda表达式"><a href="#作为参数传递Lambda表达式" class="headerlink" title="作为参数传递Lambda表达式"></a>作为参数传递Lambda表达式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toUpperString</span><span class="hljs-params">(MyFunc&lt;String&gt; mf, String str)</span> &#123;<br>    <span class="hljs-keyword">return</span> mf.getValue(str);<br>&#125;<br><br><span class="hljs-comment">// 作为参数传递lambda表达式</span><br><span class="hljs-type">String</span> <span class="hljs-variable">newStr</span> <span class="hljs-operator">=</span> toUpperString((str) -&gt; str.toUpperCase(), <span class="hljs-string">&quot;abdcegf&quot;</span>);<br>System.out.println(newStr);<br></code></pre></td></tr></table></figure><blockquote><p>为了将Lambda表达式作为参数传递，接收 Lambda 表达式的参数类型应该是与该 Lambda 表达式兼容的函数式接口的类型</p></blockquote><hr><h3 id="四大核心函数式接口"><a href="#四大核心函数式接口" class="headerlink" title="四大核心函数式接口"></a>四大核心函数式接口</h3><table><thead><tr><th>函数式接口</th><th>参数类型</th><th>返回类型</th><th>用途</th></tr></thead><tbody><tr><td>Consumer&lt;T&gt;<br> 消费型接口</td><td>T</td><td>void</td><td>对类型为T的对象应用操作,<br>包含方法：void accept(T t)</td></tr><tr><td>Supplier&lt;T&gt;<br>供给型接口</td><td></td><td></td><td></td></tr></tbody></table><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="http://t.cn/A6vi0DP9">http://t.cn/A6vi0DP9</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Functional Interface</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Functional Interface</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 8 Lambda</title>
    <link href="/2019/05/16/java_8_Lambda/"/>
    <url>/2019/05/16/java_8_Lambda/</url>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>Lambda表达式在代码中属于一个匿名函数，即没有名称且不受标识符限制的函数。可以理解为是一段可以传递的代码。它是java 8 发布的重要特性，通过使用Lambda表达式可以使代码更加简洁紧凑。</p><h3 id="Basic-syntax-format"><a href="#Basic-syntax-format" class="headerlink" title="Basic syntax format"></a>Basic syntax format</h3><p>Lambda表达式在java语言中引入了新的语法元素和操作符。这个操作符为 <code>-&gt;</code> ，该操作符被称为Lambda操作符或者箭头操作符，它将Lambda分为两个部分：</p><ul><li><strong>左侧</strong> ：指定了Lambda表达式所需要的<code>所有参数</code></li><li><strong>右侧</strong> ：指定了 <code>Lambda体</code>， 即 Lambda 表达式要执行的功能。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 语法格式一 : 无参, 无返回值, Lambda表达式只需要一条语句</span><br><span class="hljs-type">Runnable</span> <span class="hljs-variable">r1</span> <span class="hljs-operator">=</span> () -&gt; System.out.println(<span class="hljs-string">&quot;Hello Lambda!&quot;</span>);<br><br><span class="hljs-comment">// 语法格式二 : 一个参数</span><br>Consumer&lt;String&gt; fun = (args) -&gt; System.out.println(args);<br><br><span class="hljs-comment">// 语法格式三 : lambda只需要一个参数时, 参数的小括号可以省略不写</span><br>Consumer&lt;String&gt; fun = (args) -&gt; System.out.println(args);<br><br><span class="hljs-comment">// 语法格式四 : lambda需要两个参数且有返回值</span><br>BinaryOperator&lt;Long&gt; bo = (x, y) - &#123;<br>    System.out.println(<span class="hljs-string">&quot;实现函数接口方法!&quot;</span>);<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;;<br><br><span class="hljs-comment">// 语法格式五 : 当Lambda体只有一条语句时, return与大括号可以省略.</span><br>BinaryOperator&lt;Long&gt; bo = (x, y) -&gt; x + y;<br><br><span class="hljs-comment">// 语法格式六 : 显式声明lambda需要参数的类型(数据类型可以省略,编译器可自行进行类型推断)</span><br>BinaryOperator&lt;Long&gt; bo = (Long x, Long y) - &#123;<br>    System.out.println(<span class="hljs-string">&quot;实现函数接口方法!&quot;</span>);<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>类型推断: Lambda 表达式中不需要指定参数类型,程序依然可以编译,这是因为 javac 根据程序的上下文,在后台推断除了参数的类型.Lambda 表达式的类型依赖于上下文环境,是由编译器推断出来的.这就是所谓的<code>类型推断</code></p></blockquote><h3 id="Features-of-Lambda-Expressions"><a href="#Features-of-Lambda-Expressions" class="headerlink" title="Features of Lambda Expressions"></a>Features of Lambda Expressions</h3><ul><li>参数的类型可以显式的声明也可以省略，编译器可以根据上下文自行推断出参数的类型。</li><li>如果有多个参数，须要使用括号括起来，并使用逗号进行分隔。空括号代表参数为空。</li><li>如果lambda表达式只有一行参数,可以不适用括号. 比如 <code>x -&gt; return x * </code></li><li>如果Lambda表达式的主体只有单个语句，且返回值类型与表达式的返回类型相同，则可以省略大括号。如果含有多条语句，则必须使用大括号。</li></ul><h3 id="Lambda-example"><a href="#Lambda-example" class="headerlink" title="Lambda example"></a>Lambda example</h3><ul><li>从匿名内部类到Lambda的转换</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 匿名内部类</span><br><span class="hljs-type">Runnable</span> <span class="hljs-variable">runnable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello Alan.&quot;</span>);<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// lambda表达式</span><br><span class="hljs-type">Runnable</span> <span class="hljs-variable">runnable</span> <span class="hljs-operator">=</span> () -&gt; System.out.println(<span class="hljs-string">&quot;Hello Alan.&quot;</span>);<br><br><br><span class="hljs-comment">// 原本使用匿名内部类作为参数传递</span><br>TreeSet&lt;String&gt; ts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;String&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(String o1, String o2)</span> &#123;<br>        <span class="hljs-keyword">return</span> Integer.compare(o1.length(), o2.length());<br>    &#125;<br>&#125;);<br><br><span class="hljs-comment">// lambda表达式作为参数传递</span><br>TreeSet&lt;String&gt; ts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;((o1,o2) -&gt; Integer.compare(o1.length(),o2.length()));<br></code></pre></td></tr></table></figure><h3 id="Reference-Documents"><a href="#Reference-Documents" class="headerlink" title="Reference Documents"></a>Reference Documents</h3><ul><li><a href="http://t.cn/A6viO4TN">http://t.cn/A6viO4TN</a></li><li><a href="http://t.cn/A6vi0DP9">http://t.cn/A6vi0DP9</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Lambda</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Lambda</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL查找删除重复数据</title>
    <link href="/2019/04/09/MySQLSearchAndDeleteRepeat/"/>
    <url>/2019/04/09/MySQLSearchAndDeleteRepeat/</url>
    
    <content type="html"><![CDATA[<h3 id="如何查找重复行"><a href="#如何查找重复行" class="headerlink" title="如何查找重复行"></a>如何查找重复行</h3><p>第一步的定义什么样的行才是重复行。多数情况下很简单：他们某一列具有相同的值。本文采用这一定义，如果你对重复的定义比这复杂，你需要对sql做些修改。<br>如下为本文用到的数据样本</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment comment <span class="hljs-string">&#x27;自增主键&#x27;</span>,<br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">collate</span> utf8_bin <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>age <span class="hljs-type">int</span>(<span class="hljs-number">3</span>) unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;年龄&#x27;</span>,<br><span class="hljs-keyword">day</span> <span class="hljs-type">date</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;日期&#x27;</span>,<br><span class="hljs-keyword">primary</span> key (id)<br>) engine <span class="hljs-operator">=</span> InnoDB;<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <br>    student(name,age,<span class="hljs-keyword">day</span>)<br><span class="hljs-keyword">values</span><br>    (<span class="hljs-string">&#x27;alan&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&#x27;2012-10-09&#x27;</span>),<br>    (<span class="hljs-string">&#x27;peter&#x27;</span>,<span class="hljs-number">24</span>,<span class="hljs-string">&#x27;2012-10-09&#x27;</span>),<br>    (<span class="hljs-string">&#x27;joe&#x27;</span>,<span class="hljs-number">27</span>,<span class="hljs-string">&#x27;2012-10-10&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id, name, age, <span class="hljs-keyword">day</span> <span class="hljs-keyword">from</span> student；<br></code></pre></td></tr></table></figure><p>执行上方sql查询结果如下表所示</p><table><thead><tr><th>id</th><th>name</th><th>age</th><th>day</th></tr></thead><tbody><tr><td>1</td><td>alan</td><td>18</td><td>2018-10-09</td></tr><tr><td>2</td><td>peter</td><td>24</td><td>2018-10-09</td></tr><tr><td>3</td><td>joe</td><td>27</td><td>2018-10-10</td></tr></tbody></table><p>前⾯两⾏在day字段具有相同的值，因此如何我将他们当做重复⾏，这⾥有⼀查询语句可以查找。查询语句使⽤GROUP BY⼦句 把具有相同字段值的⾏归为⼀组，然后计算组的⼤⼩。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">day</span>,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">as</span> count <span class="hljs-keyword">from</span> student <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">day</span>;<br></code></pre></td></tr></table></figure><table><thead><tr><th>day</th><th>count</th></tr></thead><tbody><tr><td>2018-10-09</td><td>2</td></tr><tr><td>2018-10-10</td><td>1</td></tr></tbody></table><p>重复⾏的组⼤⼩⼤于1。如何希望只显⽰重复⾏，必须使⽤HAVING⼦句，⽐如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">day</span>,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">as</span> count <span class="hljs-keyword">from</span> student <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">day</span> <span class="hljs-keyword">having</span> count <span class="hljs-operator">&gt;</span><span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><table><thead><tr><th>day</th><th>count</th></tr></thead><tbody><tr><td>2018-10-09</td><td>2</td></tr></tbody></table><p>根据具有相同值的字段分组，然后得知显示大小大于1的组。</p><blockquote><p>为什么不使用where子句？<br>因为where子句过滤的是分组之前的行，having子句过滤的是分组之后的行。</p></blockquote><h3 id="如何删除重复行"><a href="#如何删除重复行" class="headerlink" title="如何删除重复行"></a>如何删除重复行</h3><p>常见的任务是，重复行只保留一行，其它的删除，然后可以创建适当的索引防止以后再有重复的行写入数据库。</p><p>同样，首先应当弄清楚重复行的定义。你要保留的是哪一行呢？第一行，或者是某个字段具有最大值的行？本文中，假设保留的是第一行，id字段具有最小值的行。</p><p>也许最简单的方法是通过临时表。尤其对于MySQL，有些限制是不能在查询语句中select的同时update一个表。简单起见，这里使用临时表的方法。</p><p>我们的任务是删除所有重复行，除了分组中id字段具有最小值的行。因此，需要找出大小大于1分组，以及希望保留的行。可以使用MIN()函数。下面的语句是创建临时表，以及查找需要用delete删除的行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> temporary <span class="hljs-keyword">table</span> to_delete(<br><span class="hljs-keyword">day</span> <span class="hljs-type">date</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>min_id <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br>);<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> to_delete(<span class="hljs-keyword">day</span>,min_id)<br>    <span class="hljs-keyword">select</span> <span class="hljs-keyword">day</span>,<span class="hljs-built_in">MIN</span>(id) <span class="hljs-keyword">from</span> student <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">day</span> <span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-operator">&gt;</span><span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> to_delete;<br></code></pre></td></tr></table></figure><table><thead><tr><th>day</th><th>min_id</th></tr></thead><tbody><tr><td>2018-10-09</td><td>1</td></tr></tbody></table><p>有了这些数据，就可以删除重复数据了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> studentwhere <span class="hljs-keyword">exists</span>(<br>    <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> to_delete<br>    <span class="hljs-keyword">where</span> to_delete.day <span class="hljs-operator">=</span> student.day <span class="hljs-keyword">and</span> to_delete.min_id <span class="hljs-operator">&lt;&gt;</span> student.id<br>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>查找关闭指定端口号进程</title>
    <link href="/2019/04/02/windows_closePort/"/>
    <url>/2019/04/02/windows_closePort/</url>
    
    <content type="html"><![CDATA[<p>如何关闭运行在某端口的进程,接下来以 :8080端口示例.</p><h3 id="查找占用端口号的进程"><a href="#查找占用端口号的进程" class="headerlink" title="查找占用端口号的进程"></a>查找占用端口号的进程</h3><pre><code class="hljs">netstat -o -a -n | findstr :8080</code></pre><h3 id="根据PID关闭进程"><a href="#根据PID关闭进程" class="headerlink" title="根据PID关闭进程"></a>根据PID关闭进程</h3><pre><code class="hljs">taskkill /F /PID 6528</code></pre><p>如下图所示</p><p><img src="http://xiyuxie.com.cn/img/closePort1.png" alt="closePort1"></p>]]></content>
    
    
    <categories>
      
      <category>DOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis Data Type</title>
    <link href="/2019/01/18/redisDataType/"/>
    <url>/2019/01/18/redisDataType/</url>
    
    <content type="html"><![CDATA[<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>String是redis最基本的数据类型，一个key对应一个value。<br>String类型是二进制安全的。也就是说redis的String可以包含任何数据。比如jpg图片或者序列化对象。<br>String类型的值最大可存储512MB。</p><h4 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-number">127.0</span>.0.1<span class="hljs-operator">:</span><span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> set test <span class="hljs-string">&quot;Hello Redis&quot;</span><br>OK<br><span class="hljs-number">127.0</span>.0.1<span class="hljs-operator">:</span><span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> get test<br><span class="hljs-string">&quot;Hello Redis&quot;</span><br></code></pre></td></tr></table></figure><p>如上实例中我们使用了Redis的set和get命令。键为test，对应的值为 <strong>Hello Redis</strong><br>注意：一个值最大能存储512MB。</p><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><p>Redis hash是一个键值对集合。<br>Redis hash是一个String类型的field和value的映射表，hash适合用于存储对象。</p><h4 id="Examples-1"><a href="#Examples-1" class="headerlink" title="Examples"></a>Examples</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-number">127.0</span>.0.1<span class="hljs-operator">:</span><span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> hmset student name <span class="hljs-string">&quot;alan&quot;</span> age <span class="hljs-number">19</span><br>OK<br><span class="hljs-number">127.0</span>.0.1<span class="hljs-operator">:</span><span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> hget student name<br><span class="hljs-string">&quot;alan&quot;</span><br><span class="hljs-number">127.0</span>.0.1<span class="hljs-operator">:</span><span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> hget student age<br><span class="hljs-string">&quot;19&quot;</span><br></code></pre></td></tr></table></figure><p>实例中我们使用了Redis hmset，hget命令，hmset设置了两个键值对，hget获取对应field对应的value。<br>每个hash可以存储2^32 - 1个键值对。  </p><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>Redis列表是最简单的字符串列表，按照插入顺序排序。可以添加一个元素到列表的头部或尾部。</p><h4 id="lpush-command"><a href="#lpush-command" class="headerlink" title="lpush command"></a>lpush command</h4><p>向list集合中插入元素</p><p><code>lpush key member</code></p><h4 id="lrange-command"><a href="#lrange-command" class="headerlink" title="lrange command"></a>lrange command</h4><p>输出list集合中所有的元素，须执行起始下标和结束下标</p><p><code>lrange key startIndex endIndex</code></p><h4 id="Examples-2"><a href="#Examples-2" class="headerlink" title="Examples"></a>Examples</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-number">127.0</span>.0.1<span class="hljs-operator">:</span><span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> lpush food noodles<br><span class="hljs-punctuation">(</span>integer<span class="hljs-punctuation">)</span> <span class="hljs-number">1</span><br><span class="hljs-number">127.0</span>.0.1<span class="hljs-operator">:</span><span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> lpush food hamburger<br><span class="hljs-punctuation">(</span>integer<span class="hljs-punctuation">)</span> <span class="hljs-number">2</span><br><span class="hljs-number">127.0</span>.0.1<span class="hljs-operator">:</span><span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> lpush food beef<br><span class="hljs-punctuation">(</span>integer<span class="hljs-punctuation">)</span> <span class="hljs-number">3</span><br><span class="hljs-number">127.0</span>.0.1<span class="hljs-operator">:</span><span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> lrange food <span class="hljs-number">0</span> <span class="hljs-number">5</span><br><span class="hljs-number">1</span><span class="hljs-punctuation">)</span> <span class="hljs-string">&quot;beef&quot;</span><br><span class="hljs-number">2</span><span class="hljs-punctuation">)</span> <span class="hljs-string">&quot;hamburger&quot;</span><br><span class="hljs-number">3</span><span class="hljs-punctuation">)</span> <span class="hljs-string">&quot;noodles&quot;</span><br></code></pre></td></tr></table></figure><p>列表最多可存储2^32-1个元素。  </p><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>Redis的Set是String类别的无序集合。<br>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p><h4 id="sadd-command"><a href="#sadd-command" class="headerlink" title="sadd command"></a>sadd command</h4><p>添加一个String 元素到key对应的set集合中，成功返回1，如果元素已经在集合中返回0。  </p><p><code>sadd key member</code>  </p><h4 id="smembers-command"><a href="#smembers-command" class="headerlink" title="smembers command"></a>smembers command</h4><p>遍历指定set集合中的所有元素</p><p><code>smembers key</code></p><h4 id="Examples-3"><a href="#Examples-3" class="headerlink" title="Examples"></a>Examples</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-number">127.0</span>.0.1<span class="hljs-operator">:</span><span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> sadd food noodles<br><span class="hljs-punctuation">(</span>integer<span class="hljs-punctuation">)</span> <span class="hljs-number">1</span><br><span class="hljs-number">127.0</span>.0.1<span class="hljs-operator">:</span><span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> sadd food hamburger<br><span class="hljs-punctuation">(</span>integer<span class="hljs-punctuation">)</span> <span class="hljs-number">1</span><br><span class="hljs-number">127.0</span>.0.1<span class="hljs-operator">:</span><span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> sadd food beef<br><span class="hljs-punctuation">(</span>integer<span class="hljs-punctuation">)</span> <span class="hljs-number">1</span><br><span class="hljs-number">127.0</span>.0.1<span class="hljs-operator">:</span><span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> sadd food beef<br><span class="hljs-punctuation">(</span>integer<span class="hljs-punctuation">)</span> <span class="hljs-number">0</span><br><span class="hljs-number">127.0</span>.0.1<span class="hljs-operator">:</span><span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> smembers food<br><span class="hljs-number">1</span><span class="hljs-punctuation">)</span> <span class="hljs-string">&quot;beef&quot;</span><br><span class="hljs-number">2</span><span class="hljs-punctuation">)</span> <span class="hljs-string">&quot;hamburger&quot;</span><br><span class="hljs-number">3</span><span class="hljs-punctuation">)</span> <span class="hljs-string">&quot;noodles&quot;</span><br></code></pre></td></tr></table></figure><p>注意：以上实例中beef添加了两次，但根据set集合内元素的不可重复特性，第二次插入的元素将会被忽略。<br>集合中最大成员数为2^32-1。</p><h3 id="zset-sorted-set"><a href="#zset-sorted-set" class="headerlink" title="zset(sorted set)"></a>zset(sorted set)</h3><p>Redis zset和set一样是String类型元素的集合，且不允许重复的元素。<br>zset的每个元素都会关联一个double类型的分数。redis通过分数来对集合中的成员从小到大进行排序。<br>zset的成员是唯一的，但分数(score)可以重复。  </p><h4 id="zadd-command"><a href="#zadd-command" class="headerlink" title="zadd command"></a>zadd command</h4><p>添加元素到集合，元素在集合中存在则更新对应的score。</p><p><code>zadd key score member</code></p><h4 id="zrangebyscore-command"><a href="#zrangebyscore-command" class="headerlink" title="zrangebyscore command"></a>zrangebyscore command</h4><p>输出有序set集合中的成员，执行时需要指定输出的起始下标和结束下标</p><p><code>zrangebyscore key startIndex endIndex</code></p><h4 id="Examples-4"><a href="#Examples-4" class="headerlink" title="Examples"></a>Examples</h4><blockquote><p>zset会按照各个元素对应的score进行排序。</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-number">127.0</span>.0.1<span class="hljs-operator">:</span><span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> zadd people <span class="hljs-number">0</span> alan<br><span class="hljs-punctuation">(</span>integer<span class="hljs-punctuation">)</span> <span class="hljs-number">1</span><br><span class="hljs-number">127.0</span>.0.1<span class="hljs-operator">:</span><span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> zadd people <span class="hljs-number">1</span> peter<br><span class="hljs-punctuation">(</span>integer<span class="hljs-punctuation">)</span> <span class="hljs-number">1</span><br><span class="hljs-number">127.0</span>.0.1<span class="hljs-operator">:</span><span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> zadd people <span class="hljs-number">2</span> jhon<br><span class="hljs-punctuation">(</span>integer<span class="hljs-punctuation">)</span> <span class="hljs-number">1</span><br><span class="hljs-number">127.0</span>.0.1<span class="hljs-operator">:</span><span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> zrangebyscore name <span class="hljs-number">0</span> <span class="hljs-number">10</span><br><span class="hljs-number">1</span><span class="hljs-punctuation">)</span> <span class="hljs-string">&quot;alan&quot;</span><br><span class="hljs-number">2</span><span class="hljs-punctuation">)</span> <span class="hljs-string">&quot;peter&quot;</span><br><span class="hljs-number">3</span><span class="hljs-punctuation">)</span> <span class="hljs-string">&quot;jhon&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>如果将要插入的元素在集合中已存在，set集合不会插入元素，但会更改对应的score。</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-number">127.0</span>.0.1<span class="hljs-operator">:</span><span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> zadd people <span class="hljs-number">5</span> alan<br><span class="hljs-punctuation">(</span>integer<span class="hljs-punctuation">)</span> <span class="hljs-number">0</span><br><span class="hljs-number">127.0</span>.0.1<span class="hljs-operator">:</span><span class="hljs-number">6379</span><span class="hljs-operator">&gt;</span> zrangebyscore name <span class="hljs-number">0</span> <span class="hljs-number">10</span><br><span class="hljs-number">1</span><span class="hljs-punctuation">)</span> <span class="hljs-string">&quot;peter&quot;</span><br><span class="hljs-number">2</span><span class="hljs-punctuation">)</span> <span class="hljs-string">&quot;jhon&quot;</span><br><span class="hljs-number">3</span><span class="hljs-punctuation">)</span> <span class="hljs-string">&quot;alan&quot;</span><br></code></pre></td></tr></table></figure><p>以上实例中，zset中alan的score发生变化导致顺序也发生变化。此时zset中各个元素和对应的score变化如下表。</p><table><thead><tr><th>score</th><th>member</th></tr></thead><tbody><tr><td>0d</td><td>alan</td></tr><tr><td>1d</td><td>peter</td></tr><tr><td>2d</td><td>jhon</td></tr></tbody></table><p>执行完<code>zadd people 5 alan</code>命名后，变化成</p><table><thead><tr><th>score</th><th>member</th></tr></thead><tbody><tr><td>5d</td><td>alan</td></tr><tr><td>1d</td><td>peter</td></tr><tr><td>2d</td><td>jhon</td></tr></tbody></table><p>所以再通过遍历输出zset集合时，alan的顺序变成了最后一个。</p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis Introduction</title>
    <link href="/2019/01/13/redisPresentation/"/>
    <url>/2019/01/13/redisPresentation/</url>
    
    <content type="html"><![CDATA[<h3 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h3><p>Redis是完全开源免费遵守BSD协议的，内存中数据结构存储，可以用作数据库，缓存和消息代理。<br>Redis与其它key-value缓存的特点：</p><ol><li><p>Redis支持数据的持久化，可以将内存中的数据保存到磁盘中，重启时可以再次加载进行使用，与windows的休眠功能类似，将内存中当前运行的程序的数据保存到磁盘里，再次开机时直接进入上次的工作状态。  </p></li><li><p>Redis不仅仅支持简单的key-value类型的数据，同时还支持 strings, hashes, lists, sets, sorted sets等数据结构的存储。<br>您可以在这些类型上运行原子操作，例如追加到字符串。在哈希中增加值；将元素推送到列表；计算集的交集，并集和差；或在排序集中获得排名最高的成员。</p></li><li><p>Redis支持数据的备份，即master-slave模式的数据备份。</p></li></ol><h3 id="Redis的优势"><a href="#Redis的优势" class="headerlink" title="Redis的优势"></a>Redis的优势</h3><ol><li>性能高，读的速度是每秒110000次,写的速度是每秒8100次</li><li>丰富的数据类型，redis支持String，list，hash，set等数据类型操作。</li><li>原子性，redis的所有操作都是原子性的，要么全部成功要么全部失败。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULT和EXEC指令包起来。</li><li>丰富的特性 - redis支持publish&#x2F;subscribe，通知，key过期等特性。</li></ol><h3 id="Redis与其它键值对存储的不同"><a href="#Redis与其它键值对存储的不同" class="headerlink" title="Redis与其它键值对存储的不同"></a>Redis与其它键值对存储的不同</h3><ol><li>Redis有着更为复杂的数据结构并且提供对他们的原子性操作，这是不同于其它数据库的进化路径。Redis的数据类型都是基于基本数据结构的同时对程序员透明，无需进行额外的抽象。</li><li>Redis运行在内存中但是可以持久化到磁盘，所以对不同数据集进行告诉读写时需要权衡内存，因为数据量不能大于硬件内存。在内存数据库方面的另一个优点是，相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样redis可以做很多内部复杂性很强的事情。同时，在磁盘格式方面他们是紧凑的已追加的方式产生的，因为他们不需要进行随机访问。</li></ol><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="http://suo.im/6ulYVG">http://suo.im/6ulYVG</a></li><li><a href="http://suo.im/5ZB8LH">http://suo.im/5ZB8LH</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL四种隔离级别的理解</title>
    <link href="/2018/11/16/MySQL%E5%9B%9B%E7%A7%8D%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <url>/2018/11/16/MySQL%E5%9B%9B%E7%A7%8D%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h3><blockquote><p>事务是应用程序一系列严密的操作，所有的操作都必须成功完成，否则在某个操作中所作的所有更改将全部撤销。这也就是事务的原子性，一个事务中一系列的操作的结果只有两种，全部成功或全部失败。<br>事务的结束有两种，当事务中的所有步骤全部成功执行时，事务提交。如果其中一个步骤失败，将发生回滚操作，撤销到没有执行事务时的状态。</p></blockquote><h4 id="事务的ACID"><a href="#事务的ACID" class="headerlink" title="事务的ACID"></a>事务的ACID</h4><p>事务具有四种特性： 原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）和持续性（Durability）。这四种特性简称为ACID特性。</p><ul><li>原子性。事务时数据库的逻辑工作单位，事务中包含的各种操作要么全部完成，要么全部失败。</li><li>一致性。事务执行的结果必须是使数据库从一个一致性状态百年到另一个一致性状态。因此当数据库只包含成功事务提交的结果时，就说数据库处于一致性状态。如果数据库系统运行中发生故障，有些事务尚未完成就被中断，这些未完成的事务对数据库所作的修改有一部分已写入物理数据库，这是数据库就处于一种不正确的状态，或者说是不一致的状态。</li><li>隔离性。每个事务的执行不会收到其他事务的干扰。即一个事务内部的操作及使用的数据对其它并发事务时隔离的，并发执行的各个事务之间不能相互干扰。</li><li>持续性。也称之为永久性，指一个事务一旦提交，它对数据库中的数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其执行结果有任何影响。</li></ul><h4 id="事务的四种隔离级别"><a href="#事务的四种隔离级别" class="headerlink" title="事务的四种隔离级别"></a>事务的四种隔离级别</h4><table><thead><tr><th align="center">序号</th><th align="center">隔离级别</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">Read Uncommitted</td></tr><tr><td align="center">2</td><td align="center">Read Committed</td></tr><tr><td align="center">3</td><td align="center">Repeatable Read</td></tr><tr><td align="center">4</td><td align="center">Serializable</td></tr></tbody></table><p>SQL标准定义了四类隔离级别，包括了一些具体规则，用来限定事务内外的那些改变时可见的，哪些是不可见的。低级别的隔离级别一般支持更高的并发处理，拥有更低的系统开销。</p><ol><li><p>Read Uncommitted（读未提交）<br>所有事务都可以看到其它未提交事务的执行结果。因性能优势并不明显，很少用于实际应用。读取未提交的数据，称之为脏读（Dirty Read）。  </p></li><li><p>Read Committed（读已提交）<br>大多数数据库系统的默认隔离级别。满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别也支持不可重复读（Nonrepeatable Read），因为统一事务的其它实例在该实例处理期间可能会有新的commit，所以同一select可能返回不同的结果。  </p></li><li><p>Repeatable Read（可重读）<br>MySQL的默认事务隔离级别，可以确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这回导致幻读（Phantom Read）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再次读取该范围的数据行时，会发现有新的行。InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Controller）机制解决了该问题。  </p></li><li><p>Serializable（可串行化）<br>最高的隔离级别，通过强制事务排序，使之不可相互冲突，以解决幻读问题。简而言之，它是在每个读的数据行上加上共享锁。在此级别，可能导致大量的超时现象和锁竞争。</p></li></ol><p>这四种隔离级别采取不同的锁类型来实现，若读取同一个数据，容易出现问题。举个栗子：</p><blockquote><p>脏读（Dirty Read）：某个事物已更新了一条数据，另一个事务在此时读取了同一条数据，由于某些原因，前一个事务进行了回滚操作，此时后一个事务所读的数据就是错误的。</p><p>不可重复读（Non-repeatable Read）：在一个事务的两次查询之中数据不一致，可能是两次查询过程中插入了一个事务更新了第一次查询的数据。</p><p>幻读（Phant Read）：在一个事务的两次查询中数据行数不一致，例如有一个事务查询了范围内的几列数据，另一个事务在这个范围内插入了新的几列数据，先前的事务在接下来的查询中，就会发现有几列数据是它先前所没有的。</p></blockquote><p>在MySQL中，实现了这四种隔离级别，分别可能产生的问题如下表所示：</p><table><thead><tr><th align="center">隔离级别</th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="center">Read Uncommitted</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">Read Committed</td><td align="center">×</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">Repeatable Read</td><td align="center">×</td><td align="center">×</td><td align="center">√</td></tr><tr><td align="center">Serializable</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr></tbody></table><hr><h3 id="测试MySQL的隔离级别"><a href="#测试MySQL的隔离级别" class="headerlink" title="测试MySQL的隔离级别"></a>测试MySQL的隔离级别</h3><p>首先我们先创建test表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test (<br>    id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment comment <span class="hljs-string">&#x27;自增主键&#x27;</span>,<br>    num <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;0&#x27;</span> comment <span class="hljs-string">&#x27;数字&#x27;</span>,<br>    <span class="hljs-keyword">primary</span> key (id)<br>) ENGINE <span class="hljs-operator">=</span> InnoDB AUTO_INCREMENT <span class="hljs-operator">=</span> <span class="hljs-number">4</span> <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8;<br></code></pre></td></tr></table></figure><p>两个命令行客户端分别为A，B；不断改变A的隔离级别，在B端修改数据。</p><h4 id="将A的隔离级别设置为read-uncommitted-未提交读"><a href="#将A的隔离级别设置为read-uncommitted-未提交读" class="headerlink" title="将A的隔离级别设置为read uncommitted(未提交读)"></a>将A的隔离级别设置为read uncommitted(未提交读)</h4><p><img src="/read_uncommitted1.png" alt="read_uncommitted1"></p><p>A：启动事务，此时数据为初始状态</p><p><img src="/read_uncommitted2.png" alt="read_uncommitted2"></p><p>B: 启动事务，更新数据，但不提交</p><p><img src="/read_uncommitted3.png" alt="read_uncommitted3"></p><p>A: 再次读取数据，发现数据已经被修改了，这就是所谓的脏读。</p><p><img src="/read_uncommitted4.png" alt="read_uncommitted4"></p><p>B: 回滚事务</p><p><img src="/read_uncommitted5.png" alt="read_uncommitted5"></p><p>A: 再次读数据，发现数据变回初始状态</p><p><img src="/read_uncommitted6.png" alt="read_uncommitted6"></p><h4 id="将客户端A的事务隔离级别设置为read-committed（读已提交）"><a href="#将客户端A的事务隔离级别设置为read-committed（读已提交）" class="headerlink" title="将客户端A的事务隔离级别设置为read committed（读已提交）"></a>将客户端A的事务隔离级别设置为read committed（读已提交）</h4><p><img src="/read_uncommitted1.png" alt="read_committed1"></p><p>A: 启动事务，此时数据为初始状态</p><p><img src="/read_uncommitted2.png" alt="read_committed2"></p><p>B: 启动事务，更新数据，但不提交</p><p><img src="/read_uncommitted3.png" alt="read_committed3"></p><p>A: 再次读取数据，发现数据未被修改</p><p><img src="/read_uncommitted4.png" alt="read_committed4"></p><p>B: 提交事务</p><p><img src="/read_uncommitted5.png" alt="read_committed5"></p><p>A: 再次读取数据，发现数据已发生变化，说明B提交的修改被事务A读到了，这就是不可重复读。</p><p><img src="/read_uncommitted6.png" alt="read_committed6"></p><p>经过上面的实验可以得出结论，读已提交隔离级别可以解决脏读的问题，但是出现了不可重复读的问题，即事务A再两次查询的数据不一致，因为再两次查询之间事务B更新了一条数据。读已提交只允许读取已提交的记录，但不要求可重复读。</p><h4 id="将A的隔离级别设置未repeatable-read（可重复读）"><a href="#将A的隔离级别设置未repeatable-read（可重复读）" class="headerlink" title="将A的隔离级别设置未repeatable read（可重复读）"></a>将A的隔离级别设置未repeatable read（可重复读）</h4><p><img src="/repeatable_read1.png" alt="repeatable_read1.png"></p><p>A: 启动事务，此时数据为初始状态</p><p><img src="/repeatable_read2.png" alt="repeatable_read2.png"></p><p>B：启动事务，更新数据，但不提交</p><p><img src="/repeatable_read3.png" alt="repeatable_read3.png"></p><p>A: 再次读取数据，发现数据没有被修改</p><p><img src="/repeatable_read4.png" alt="repeatable_read4.png"></p><p>B: 提交事务</p><p><img src="/repeatable_read5.png" alt="repeatable_read5.png"></p><p>A: 再次读取数据，发现数据仍然没有被更改，这说明可以重复读了</p><p><img src="/repeatable_read6.png" alt="repeatable_read6.png"></p><p>B: 插入一条新的数据，并提交</p><p><img src="/repeatable_read7.png" alt="repeatable_read7.png"></p><p>A: 再次读取数据，发现数据依然没有发生变化，虽然可以重复读了，但是读取的却不是最新的数据，这就是所谓的幻读。</p><p><img src="/repeatable_read8.png" alt="repeatable_read8.png"></p><p>A: 提交本次事务，再次读取数据，发现读取正常了</p><p><img src="/repeatable_read9.png" alt="repeatable_read9.png"></p><p>由以上的实验可以得出结论，可重复读隔离级别只允许读取已提交的记录，而且再一个事务两次读取一个记录期间，其它事务B更改该记录。但该事务不要求与其他事务可串行化。例如，当一个事务可以找到由一个已提交事务更新的记录，可能会产生幻读的问题。</p><h4 id="将A的隔离级别设置为可串行化（Serializable）"><a href="#将A的隔离级别设置为可串行化（Serializable）" class="headerlink" title="将A的隔离级别设置为可串行化（Serializable）"></a>将A的隔离级别设置为可串行化（Serializable）</h4><p><img src="/serializable1.png" alt="serializable1.png"></p><p>A: 启动事务，此时数据为初始状态</p><p><img src="/serializable2.png" alt="serializable2.png"></p><p>B: 开启另一个事务执行插入命令，发现B进入了等待状态，原因是因为A的事务尚未提交，只能等待。此时，B可能会发生等待超时。</p><p><img src="/serializable3.png" alt="serializable3.png"></p><p>A: 提交事务</p><p><img src="/serializable4.png" alt="serializable4.png"></p><p>B: 发现插入成功</p><p><img src="/serializable5.png" alt="serializable5.png"></p><p>serializable完全锁定字段，若一个事务来查询同一份数据就必须等待，知道前一个事务完成并解除锁定为止。是完整的隔离级别，会锁定对应的数据表格，所以效率不高。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL Knownledge</title>
    <link href="/2018/11/09/MySQL%E7%9F%A5%E8%AF%86/"/>
    <url>/2018/11/09/MySQL%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h4 id="示例SQL"><a href="#示例SQL" class="headerlink" title="示例SQL"></a>示例SQL</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test (<br>    id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment comment <span class="hljs-string">&#x27;自增主键&#x27;</span>,<br>    num <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;0&#x27;</span> comment <span class="hljs-string">&#x27;数字&#x27;</span>,<br>    <span class="hljs-keyword">primary</span> key (id)<br>) ENGINE <span class="hljs-operator">=</span> InnoDB AUTO_INCREMENT <span class="hljs-operator">=</span> <span class="hljs-number">4</span> <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8;<br></code></pre></td></tr></table></figure><p>如上的建表SQL中，出现了ENGINE &#x3D; InnoDB AUTO_INCREMENT &#x3D; 4 DEFAULT CHARSET &#x3D; utf8；但不知道其含义是什么。</p><ol><li><p>InnoDB不就是MySQL的默认引擎吗？<br>此处不写也是可以的，这里写上可以清楚的知道在建表的时候使用了什么引擎。</p></li><li><p>主键已经设置了自增，这里的AUTO_INCREMENT有什么作用？<br>这里设置的数字的意思是想要这条语句在增长的时候，从4开始自增。</p></li><li><p>uft8在这里的作用是什么？<br>代表mysql建立数据库数据表是设定字符集为utf-8.</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown Basic Doc</title>
    <link href="/2018/10/15/MarkdownDoc/"/>
    <url>/2018/10/15/MarkdownDoc/</url>
    
    <content type="html"><![CDATA[<h3 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean">#      一级标题<br>##     二级标题<br>###    三级标题<br>####   四级标题<br>#####  五级标题<br>###### 六级标题<br></code></pre></td></tr></table></figure><hr><h3 id="Paragraph"><a href="#Paragraph" class="headerlink" title="Paragraph"></a>Paragraph</h3><h4 id="Font"><a href="#Font" class="headerlink" title="Font"></a>Font</h4><p>  <code>*斜体文本demo1*</code> <code>**粗体文本demo1**</code>  <code>***斜粗体文本demo1***</code>  </p><p>  <code>_斜体文本demo2_</code>  <code>__粗体文本demo2__</code>  <code>___斜粗体文本demo2___</code>  </p><p>$\Downarrow$$\Downarrow$显示效果$\Downarrow$$\Downarrow$</p><ul><li><em>斜体文字demo1</em>   <strong>粗体文本demo1</strong>   <em><strong>斜粗体文本demo1</strong></em></li><li><em>斜体文本demo2</em>   <strong>粗体文本demo2</strong>   <em><strong>斜粗体文本demo2</strong></em></li></ul><h4 id="Dividing-Line"><a href="#Dividing-Line" class="headerlink" title="Dividing Line"></a>Dividing Line</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-number">1</span>、 ***<br><span class="hljs-number">2</span>、 * * *<br><span class="hljs-number">3</span>、 *****<br><span class="hljs-number">4</span>、 - - -<br><span class="hljs-number">5</span>、 <span class="hljs-comment">------------</span><br></code></pre></td></tr></table></figure><h4 id="Strikethrough"><a href="#Strikethrough" class="headerlink" title="Strikethrough"></a>Strikethrough</h4><p>  在需要添加删除线的文字两端各添加两个波浪线<code>~~</code>  </p><p><code>~~testText~~</code> $\Rightarrow$ <del>testText</del></p><h4 id="Underline"><a href="#Underline" class="headerlink" title="Underline"></a>Underline</h4><p><code>&lt;u&gt;下划线文本&lt;/u&gt;</code> $\Rightarrow$ <u>下划线文本</u></p><hr><h3 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h3><h4 id="Unordered"><a href="#Unordered" class="headerlink" title="Unordered"></a>Unordered</h4><p>无序列表可以使用<code>*</code> <code>+</code> <code>-</code>作为标记 </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 第一条语句<br><span class="hljs-bullet">*</span> 第二条语句<br><span class="hljs-bullet">*</span> 第三条语句<br><br><span class="hljs-bullet">+</span> 第一条语句<br><span class="hljs-bullet">+</span> 第二条语句<br><span class="hljs-bullet">+</span> 第三条语句<br><br><span class="hljs-bullet">-</span> 第一条语句<br><span class="hljs-bullet">-</span> 第二条语句<br><span class="hljs-bullet">-</span> 第三条语句<br></code></pre></td></tr></table></figure><p>$\Downarrow$$\Downarrow$显示效果$\Downarrow$$\Downarrow$</p><ul><li>第一条语句</li><li>第二条语句</li><li>第三条语句</li></ul><h4 id="Ordered"><a href="#Ordered" class="headerlink" title="Ordered"></a>Ordered</h4><p>有序列表使用数字并加上<code>.</code>来表示，注意点后有空格</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">1.第一项<br>2.第二项<br>3.第三项<br></code></pre></td></tr></table></figure><p>$\Downarrow$$\Downarrow$ 显示效果$\Downarrow$ $\Downarrow$   </p><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><hr><h3 id="Blockquotes"><a href="#Blockquotes" class="headerlink" title="Blockquotes"></a>Blockquotes</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">  java</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;  java.lang</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; java.lang.Thread</span><br></code></pre></td></tr></table></figure><p>$\Downarrow$$\Downarrow$显示效果$\Downarrow$$\Downarrow$</p><blockquote><p>java</p><blockquote><p>java.lang</p><blockquote><p>java.lang.Thread</p></blockquote></blockquote></blockquote><hr><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><h4 id="Inline-code"><a href="#Inline-code" class="headerlink" title="Inline code"></a>Inline code</h4><p>如果要突出显示段落上的一个函数或者代码片段可以使用反引号（&#96;）把它包起来 </p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">`checkUserName`函数<br></code></pre></td></tr></table></figure><p>$\Downarrow$$\Downarrow$显示效果如下$\Downarrow$$\Downarrow$<br><code>checkUserName()</code>函数</p><h4 id="Syntax-highlighting"><a href="#Syntax-highlighting" class="headerlink" title="Syntax highlighting"></a>Syntax highlighting</h4><p>代码区块使用四个空格或者一个Tab键<br>也可以使用&#96;&#96;&#96;包裹一段代码，并指定一种语言.也可以不指定代码语言</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">```<span class="language-javascript">javascript</span><br><span class="language-javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;RUNOOB&#x27;</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span>```<br></code></pre></td></tr></table></figure><p>$\Downarrow$$\Downarrow$显示效果$\Downarrow$$\Downarrow$</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br>$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Welcome!&#x27;</span>);<br>&#125;);<br><br></code></pre></td></tr></table></figure><hr><h3 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h3><p>链接使用方法如下：  </p><ul><li><code>[google](http://www.google.com)</code> $\Rightarrow$ <a href="http://www.google.com/">google</a></li><li><code>www.google.com</code> $\Rightarrow$ <a href="http://www.google.com/">www.google.com</a></li></ul><p>这个链接使用变量代替<code>[google][1]</code>，并在文末添加此链接的地址<code>[1]:http://www.google.com</code> $\Rightarrow$ <a href="http://www.google.com/">google</a></p><hr><h3 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h3><p>Markdown图片的基本语法格式如下：<br><code>![alt girl]（girl.png）</code> $\Rightarrow$ <img src="/girl.png" alt="girl"><br>也可以像使用网址链接那样使用变量赋值<br><code>![alt girl][2]</code> $\Rightarrow$ <img src="/girl.png" alt="alt girl"></p><h3 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h3><p>Markdown制作表格使用<code>|</code>来分隔不同的单元格，使用<code>-</code>来分隔表头和其他行。<br>语法格式如下</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"> 表头 </span>|<span class="hljs-string"> 表头 </span>|<span class="hljs-string"> 表头 </span>|<br>|<span class="hljs-string"> --- </span>|<span class="hljs-string"> ---  </span>|<span class="hljs-string"> --- </span>|<br>|<span class="hljs-string">单元格</span>|<span class="hljs-string">单元格</span>|<span class="hljs-string">单元格</span>|<br>|<span class="hljs-string">单元格</span>|<span class="hljs-string">单元格</span>|<span class="hljs-string">单元格</span>|<br><br></code></pre></td></tr></table></figure><p>$\Downarrow$$\Downarrow$显示效果$\Downarrow$$\Downarrow$</p><table><thead><tr><th>表头</th><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td><td>单元格</td></tr></tbody></table><p>我们可以设置表格的对齐方式：</p><ul><li><code>-:</code>  设置内容和标题栏居右对齐</li><li><code>:-</code>  设置内容和标题栏居左对齐</li><li><code>:-:</code> 设置内容和标题栏居中对齐</li></ul><center>$\Downarrow$$\Downarrow$显示效果$\Downarrow$$\Downarrow$</center><p><img src="/table.png" alt="alt table"></p><hr><h3 id="Reference-Documents"><a href="#Reference-Documents" class="headerlink" title="Reference Documents"></a>Reference Documents</h3><ul><li><a href="https://www.runoob.com/markdown/md-tutorial.html">https://www.runoob.com/markdown/md-tutorial.html</a></li><li><a href="https://guides.github.com/features/mastering-markdown/">https://guides.github.com/features/mastering-markdown/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
